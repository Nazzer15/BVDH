• App_Start
• BundleConfig.cs

using System.Web;
using System.Web.Optimization;

namespace ProyectoWEB
{
    public class BundleConfig
    {
        // For more information on bundling, visit https://go.microsoft.com/fwlink/?LinkId=301862
        public static void RegisterBundles(BundleCollection bundles)
        {
            bundles.Add(new ScriptBundle("~/bundles/jquery").Include(
                        "~/Scripts/jquery-{version}.js"));

            bundles.Add(new ScriptBundle("~/bundles/jqueryval").Include(
                        "~/Scripts/jquery.validate*"));

            // Use the development version of Modernizr to develop with and learn from. Then, when you're
            // ready for production, use the build tool at https://modernizr.com to pick only the tests you need.
            bundles.Add(new ScriptBundle("~/bundles/modernizr").Include(
                        "~/Scripts/modernizr-*"));

            bundles.Add(new ScriptBundle("~/bundles/bootstrap").Include(
                      "~/Content/vendor/jquery/jquery.min.js",
                      "~/Content/vendor/bootstrap/js/bootstrap.bundle.min.js",
                      "~/Content/vendor/jquery-easing/jquery.easing.min.js",
                      "~/Content/js/sb-admin-2.min.js"));

            bundles.Add(new StyleBundle("~/Content/css").Include(
                      "~/Content/vendor/fontawesome-free/css/all.min.css",
                      "~/Content/css/sb-admin-2.min.css"));
        }
    }
}


***********************************************************************************************************************************************************************
• FilterConfig.cs

using System.Web;
using System.Web.Mvc;

namespace ProyectoWEB
{
    public class FilterConfig
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection filters)
        {
            filters.Add(new HandleErrorAttribute());
        }
    }
}

***********************************************************************************************************************************************************************
• IdentityConfig

using System.Web;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin;
using Microsoft.Owin.Security;
using ProyectoWEB.Models;

namespace ProyectoWEB
{
    public class EmailService : IIdentityMessageService
    {
        public Task SendAsync(IdentityMessage message)
        {
            // Plug in your email service here to send an email.
            return Task.FromResult(0);
        }
    }

    public class SmsService : IIdentityMessageService
    {
        public Task SendAsync(IdentityMessage message)
        {
            // Plug in your SMS service here to send a text message.
            return Task.FromResult(0);
        }
    }

    // Configure the application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application.
    public class ApplicationUserManager : UserManager<ApplicationUser>
    {
        public ApplicationUserManager(IUserStore<ApplicationUser> store)
            : base(store)
        {
        }

        public static ApplicationUserManager Create(IdentityFactoryOptions<ApplicationUserManager> options, IOwinContext context) 
        {
            var manager = new ApplicationUserManager(new UserStore<ApplicationUser>(context.Get<ApplicationDbContext>()));
            // Configure validation logic for usernames
            manager.UserValidator = new UserValidator<ApplicationUser>(manager)
            {
                AllowOnlyAlphanumericUserNames = false,
                RequireUniqueEmail = true
            };

            // Configure validation logic for passwords
            manager.PasswordValidator = new PasswordValidator
            {
                RequiredLength = 6,
                RequireNonLetterOrDigit = true,
                RequireDigit = true,
                RequireLowercase = true,
                RequireUppercase = true,
            };

            // Configure user lockout defaults
            manager.UserLockoutEnabledByDefault = true;
            manager.DefaultAccountLockoutTimeSpan = TimeSpan.FromHours(3);
            manager.MaxFailedAccessAttemptsBeforeLockout = 5;

            // Register two factor authentication providers. This application uses Phone and Emails as a step of receiving a code for verifying the user
            // You can write your own provider and plug it in here.
            manager.RegisterTwoFactorProvider("Phone Code", new PhoneNumberTokenProvider<ApplicationUser>
            {
                MessageFormat = "Your security code is {0}"
            });
            manager.RegisterTwoFactorProvider("Email Code", new EmailTokenProvider<ApplicationUser>
            {
                Subject = "Security Code",
                BodyFormat = "Your security code is {0}"
            });
            manager.EmailService = new EmailService();
            manager.SmsService = new SmsService();
            var dataProtectionProvider = options.DataProtectionProvider;
            if (dataProtectionProvider != null)
            {
                manager.UserTokenProvider = 
                    new DataProtectorTokenProvider<ApplicationUser>(dataProtectionProvider.Create("ASP.NET Identity"));
            }
            return manager;
        }
    }

    // Configure the application sign-in manager which is used in this application.
    public class ApplicationSignInManager : SignInManager<ApplicationUser, string>
    {
        public ApplicationSignInManager(ApplicationUserManager userManager, IAuthenticationManager authenticationManager)
            : base(userManager, authenticationManager)
        {
        }

        public override Task<ClaimsIdentity> CreateUserIdentityAsync(ApplicationUser user)
        {
            return user.GenerateUserIdentityAsync((ApplicationUserManager)UserManager);
        }

        public static ApplicationSignInManager Create(IdentityFactoryOptions<ApplicationSignInManager> options, IOwinContext context)
        {
            return new ApplicationSignInManager(context.GetUserManager<ApplicationUserManager>(), context.Authentication);
        }
    }
}

***********************************************************************************************************************************************************************
• RouteConfig.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace ProyectoWEB
{
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Account", action = "SmartLogin", id = UrlParameter.Optional }
            );
        }
    }
}



***********************************************************************************************************************************************************************
• Startup.Auth.cs

using System;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.Google;
using Owin;
using ProyectoWEB.Models;

namespace ProyectoWEB
{
    public partial class Startup
    {
        // For more information on configuring authentication, please visit https://go.microsoft.com/fwlink/?LinkId=301864
        public void ConfigureAuth(IAppBuilder app)
        {
            // Configure the db context, user manager and signin manager to use a single instance per request
            app.CreatePerOwinContext(ApplicationDbContext.Create);
            app.CreatePerOwinContext<ApplicationUserManager>(ApplicationUserManager.Create);
            app.CreatePerOwinContext<ApplicationSignInManager>(ApplicationSignInManager.Create);
            
            // Enable the application to use a cookie to store information for the signed in user
            // and to use a cookie to temporarily store information about a user logging in with a third party login provider
            // Configure the sign in cookie
            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                ExpireTimeSpan = TimeSpan.FromHours(3),
                AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
                LoginPath = new PathString("/Account/Login"),
                Provider = new CookieAuthenticationProvider
                {
                    // Enables the application to validate the security stamp when the user logs in.
                    // This is a security feature which is used when you change a password or add an external login to your account.  
                    OnValidateIdentity = SecurityStampValidator.OnValidateIdentity<ApplicationUserManager, ApplicationUser>(
                        validateInterval: TimeSpan.FromMinutes(30),
                        regenerateIdentity: (manager, user) => user.GenerateUserIdentityAsync(manager))
                }
            });            
            app.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);

            // Enables the application to temporarily store user information when they are verifying the second factor in the two-factor authentication process.
            app.UseTwoFactorSignInCookie(DefaultAuthenticationTypes.TwoFactorCookie, TimeSpan.FromMinutes(5));

            // Enables the application to remember the second login verification factor such as phone or email.
            // Once you check this option, your second step of verification during the login process will be remembered on the device where you logged in from.
            // This is similar to the RememberMe option when you log in.
            app.UseTwoFactorRememberBrowserCookie(DefaultAuthenticationTypes.TwoFactorRememberBrowserCookie);

            // Uncomment the following lines to enable logging in with third party login providers
            //app.UseMicrosoftAccountAuthentication(
            //    clientId: "",
            //    clientSecret: "");

            //app.UseTwitterAuthentication(
            //   consumerKey: "",
            //   consumerSecret: "");

            //app.UseFacebookAuthentication(
            //   appId: "",
            //   appSecret: "");

            //app.UseGoogleAuthentication(new GoogleOAuth2AuthenticationOptions()
            //{
            //    ClientId = "",
            //    ClientSecret = ""
            //});
        }
    }
}


***********************************************************************************************************************************************************************
• Controllers
• AccountController

using System;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Net.Mail;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security;
using ProyectoWEB.Models;
using ProyectoWEB.Models.BVDH_Models;

namespace ProyectoWEB.Controllers
{

    [Authorize]
    public class AccountController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;

        public AccountController()
        {
        }

        public AccountController(ApplicationUserManager userManager, ApplicationSignInManager signInManager )
        {
            UserManager = userManager;
            SignInManager = signInManager;
        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set 
            { 
                _signInManager = value; 
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }


        //
        // GET: /Account/Login
        [AllowAnonymous]
        public ActionResult SmartLogin(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        //
        // POST: /Account/Login
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> SmartLogin(LoginViewModel model, string returnUrl)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, change to shouldLockout: true
            var result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: false);

            var consulta = (from c in db.AspNetUsers where c.Email == model.Email select c.estado).FirstOrDefault();

            if (consulta == null)
            {
                return RedirectToAction("SmartLogin");
            }

            switch (result)
            {
                case SignInStatus.Success:
                    return RedirectToLocal(returnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.RequiresVerification:
                    return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
                case SignInStatus.Failure:
                default:
                    ModelState.AddModelError("", "Invalid login attempt.");
                    return View(model);
            }
        }

        //
        // GET: /Account/Login
        [AllowAnonymous]
        public ActionResult Login(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        //
        // POST: /Account/Login
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Login(LoginViewModel model, string returnUrl)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, change to shouldLockout: true
            var result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: false);         
            
            switch (result)
            {
                case SignInStatus.Success:
                    return RedirectToLocal(returnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.RequiresVerification:
                    return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
                case SignInStatus.Failure:
                default:
                    ModelState.AddModelError("", "Invalid login attempt.");
                    return View(model);
            }
        }


        //
        // GET: /Account/VerifyCode
        [AllowAnonymous]
        public async Task<ActionResult> VerifyCode(string provider, string returnUrl, bool rememberMe)
        {
            // Require that the user has already logged in via username/password or external login
            if (!await SignInManager.HasBeenVerifiedAsync())
            {
                return View("Error");
            }
            return View(new VerifyCodeViewModel { Provider = provider, ReturnUrl = returnUrl, RememberMe = rememberMe });
        }

        //
        // POST: /Account/VerifyCode
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> VerifyCode(VerifyCodeViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            // The following code protects for brute force attacks against the two factor codes. 
            // If a user enters incorrect codes for a specified amount of time then the user account 
            // will be locked out for a specified amount of time. 
            // You can configure the account lockout settings in IdentityConfig
            var result = await SignInManager.TwoFactorSignInAsync(model.Provider, model.Code, isPersistent:  model.RememberMe, rememberBrowser: model.RememberBrowser);
            switch (result)
            {
                case SignInStatus.Success:
                    return RedirectToLocal(model.ReturnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.Failure:
                default:
                    ModelState.AddModelError("", "Invalid code.");
                    return View(model);
            }
        }

        private static readonly Random Random = new Random();

        private static string PasswordGenerator(int passwordLength, bool strongPassword)
        {
            int seed = Random.Next(1, int.MaxValue);
            //const string allowedChars = "ABCDEFGHJKLMNOPQRSTUVWXYZ0123456789";
            const string allowedChars = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789";
            const string specialCharacters = @"!#$%&'()*+,-./:;<=>?@[\]_";

            var chars = new char[passwordLength];
            var rd = new Random(seed);

            for (var i = 0; i < passwordLength; i++)
            {
                // If we are to use special characters
                if (strongPassword && i % Random.Next(3, passwordLength) == 0)
                {
                    chars[i] = specialCharacters[rd.Next(0, specialCharacters.Length)];
                }
                else
                {
                    chars[i] = allowedChars[rd.Next(0, allowedChars.Length)];
                }
            }

            return new string(chars);
        }

        //
        // GET: /Account/Register
        [AllowAnonymous]
        public ActionResult Register()
        {
            ViewBag.password = PasswordGenerator(12, true);
            
            return View();
        }

        //
        // POST: /Account/Register
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Register(RegisterViewModel model)
        {
            ViewBag.password = PasswordGenerator(12, true);
            if (ModelState.IsValid)
            {
                var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
                var result = await UserManager.CreateAsync(user, model.Password);

                if (result.Succeeded)
                {
                    var currentUser = UserManager.FindByName(user.UserName);

                    var roleresult = UserManager.AddToRole(currentUser.Id, "Chofer");

                    return RedirectToAction("Index", "Home");
                }
                AddErrors(result);
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }


        //
        // GET: /Account/ConfirmEmail
        [AllowAnonymous]
        public async Task<ActionResult> ConfirmEmail(string userId, string code)
        {
            if (userId == null || code == null)
            {
                return View("Error");
            }
            var result = await UserManager.ConfirmEmailAsync(userId, code);
            return View(result.Succeeded ? "ConfirmEmail" : "Error");
        }

        //
        // GET: /Account/ForgotPassword
        [AllowAnonymous]
        public ActionResult ForgotPassword()
        {
            return View();
        }

        //
        // POST: /Account/ForgotPassword
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ForgotPassword(ForgotPasswordViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = await UserManager.FindByNameAsync(model.Email);
                if (user == null || !(await UserManager.IsEmailConfirmedAsync(user.Id)))
                {
                    // Don't reveal that the user does not exist or is not confirmed
                    return View("ForgotPasswordConfirmation");
                }

                // For more information on how to enable account confirmation and password reset please visit https://go.microsoft.com/fwlink/?LinkID=320771
                // Send an email with this link
                // string code = await UserManager.GeneratePasswordResetTokenAsync(user.Id);
                // var callbackUrl = Url.Action("ResetPassword", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme);		
                // await UserManager.SendEmailAsync(user.Id, "Reset Password", "Please reset your password by clicking <a href=\"" + callbackUrl + "\">here</a>");
                // return RedirectToAction("ForgotPasswordConfirmation", "Account");
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        //
        // GET: /Account/ForgotPasswordConfirmation
        [AllowAnonymous]
        public ActionResult ForgotPasswordConfirmation()
        {
            return View();
        }

        //
        // GET: /Account/ResetPassword
        [AllowAnonymous]
        public ActionResult ResetPassword(string code)
        {
            return code == null ? View("Error") : View();
        }

        //
        // POST: /Account/ResetPassword
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ResetPassword(ResetPasswordViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var user = await UserManager.FindByNameAsync(model.Email);
            if (user == null)
            {
                // Don't reveal that the user does not exist
                return RedirectToAction("ResetPasswordConfirmation", "Account");
            }
            var result = await UserManager.ResetPasswordAsync(user.Id, model.Code, model.Password);
            if (result.Succeeded)
            {
                return RedirectToAction("ResetPasswordConfirmation", "Account");
            }
            AddErrors(result);
            return View();
        }

        //
        // GET: /Account/ResetPasswordConfirmation
        [AllowAnonymous]
        public ActionResult ResetPasswordConfirmation()
        {
            return View();
        }

        //
        // POST: /Account/ExternalLogin
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult ExternalLogin(string provider, string returnUrl)
        {
            // Request a redirect to the external login provider
            return new ChallengeResult(provider, Url.Action("ExternalLoginCallback", "Account", new { ReturnUrl = returnUrl }));
        }

        //
        // GET: /Account/SendCode
        [AllowAnonymous]
        public async Task<ActionResult> SendCode(string returnUrl, bool rememberMe)
        {
            var userId = await SignInManager.GetVerifiedUserIdAsync();
            if (userId == null)
            {
                return View("Error");
            }
            var userFactors = await UserManager.GetValidTwoFactorProvidersAsync(userId);
            var factorOptions = userFactors.Select(purpose => new SelectListItem { Text = purpose, Value = purpose }).ToList();
            return View(new SendCodeViewModel { Providers = factorOptions, ReturnUrl = returnUrl, RememberMe = rememberMe });
        }

        //
        // POST: /Account/SendCode
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> SendCode(SendCodeViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View();
            }

            // Generate the token and send it
            if (!await SignInManager.SendTwoFactorCodeAsync(model.SelectedProvider))
            {
                return View("Error");
            }
            return RedirectToAction("VerifyCode", new { Provider = model.SelectedProvider, ReturnUrl = model.ReturnUrl, RememberMe = model.RememberMe });
        }

        //
        // GET: /Account/ExternalLoginCallback
        [AllowAnonymous]
        public async Task<ActionResult> ExternalLoginCallback(string returnUrl)
        {
            var loginInfo = await AuthenticationManager.GetExternalLoginInfoAsync();
            if (loginInfo == null)
            {
                return RedirectToAction("Login");
            }

            // Sign in the user with this external login provider if the user already has a login
            var result = await SignInManager.ExternalSignInAsync(loginInfo, isPersistent: false);
            switch (result)
            {
                case SignInStatus.Success:
                    return RedirectToLocal(returnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.RequiresVerification:
                    return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = false });
                case SignInStatus.Failure:
                default:
                    // If the user does not have an account, then prompt the user to create an account
                    ViewBag.ReturnUrl = returnUrl;
                    ViewBag.LoginProvider = loginInfo.Login.LoginProvider;
                    return View("ExternalLoginConfirmation", new ExternalLoginConfirmationViewModel { Email = loginInfo.Email });
            }
        }

        //
        // POST: /Account/ExternalLoginConfirmation
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ExternalLoginConfirmation(ExternalLoginConfirmationViewModel model, string returnUrl)
        {
            if (User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Manage");
            }

            if (ModelState.IsValid)
            {
                // Get the information about the user from the external login provider
                var info = await AuthenticationManager.GetExternalLoginInfoAsync();
                if (info == null)
                {
                    return View("ExternalLoginFailure");
                }
                var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
                var result = await UserManager.CreateAsync(user);
                if (result.Succeeded)
                {
                    result = await UserManager.AddLoginAsync(user.Id, info.Login);
                    if (result.Succeeded)
                    {
                        await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                        return RedirectToLocal(returnUrl);
                    }
                }
                AddErrors(result);
            }

            ViewBag.ReturnUrl = returnUrl;
            return View(model);
        }

        //
        // POST: /Account/LogOff
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LogOff()
        {
            AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie);
            return RedirectToAction("SmartLogin", "Account");
        }

        //
        // GET: /Account/ExternalLoginFailure
        [AllowAnonymous]
        public ActionResult ExternalLoginFailure()
        {
            return View();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (_userManager != null)
                {
                    _userManager.Dispose();
                    _userManager = null;
                }

                if (_signInManager != null)
                {
                    _signInManager.Dispose();
                    _signInManager = null;
                }
            }

            base.Dispose(disposing);
        }

        #region Helpers
        // Used for XSRF protection when adding external logins
        private const string XsrfKey = "XsrfId";

        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError("", error);
            }
        }

        private ActionResult RedirectToLocal(string returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            return RedirectToAction("Index", "Home");
        }

        internal class ChallengeResult : HttpUnauthorizedResult
        {
            public ChallengeResult(string provider, string redirectUri)
                : this(provider, redirectUri, null)
            {
            }

            public ChallengeResult(string provider, string redirectUri, string userId)
            {
                LoginProvider = provider;
                RedirectUri = redirectUri;
                UserId = userId;
            }

            public string LoginProvider { get; set; }
            public string RedirectUri { get; set; }
            public string UserId { get; set; }

            public override void ExecuteResult(ControllerContext context)
            {
                var properties = new AuthenticationProperties { RedirectUri = RedirectUri };
                if (UserId != null)
                {
                    properties.Dictionary[XsrfKey] = UserId;
                }
                context.HttpContext.GetOwinContext().Authentication.Challenge(properties, LoginProvider);
            }


            
        }
        #endregion
    }
}

***********************************************************************************************************************************************************************
• BitacoraController

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using PagedList;
using ProyectoWEB.Models.BVDH_Models;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Admin")]
    public class BitacoraController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();

        // GET: Bitacora
        public ActionResult Index(string ordenar, string buscar, string filtroActual, int? pagina)
        {
            ViewBag.idUnidadSortParm = String.IsNullOrEmpty(ordenar) ? "idUnidad_desc" : "";
            ViewBag.idChoferSortParm = ordenar == "idChofer" ? "idChofer_desc" : "idChofer";
            ViewBag.tipoUnidadSortParm = ordenar == "tipoUnidad" ? "tipoUnidad_desc" : "tipoUnidad";
            ViewBag.fechaHoraSortParm = ordenar == "fechaHora" ? "fechaHora_desc" : "fechaHora";
            ViewBag.fechaHoraLlegadaSortParm = ordenar == "fechaHoraLlegada" ? "fechaHoraLlegada_desc" : "fechaHoraLlegada";
            
            if(buscar != null)
            {
                pagina = 1;
            }
            else
            {
                buscar = filtroActual;
            }
            ViewBag.filtroActual = buscar;

            var bitacora = from b in db.Bitacora_historica select b;

            if (!String.IsNullOrEmpty(buscar))
            {
                bitacora = bitacora.Where(b => b.Unidad.numUnidad.ToString().Contains(buscar) ||
                b.Chofer.cedChofer.ToString().Contains(buscar) ||
                b.Unidad.tipoUnidad.ToString().Contains(buscar) ||
                b.fechaHora.ToString().Contains(buscar) ||
                b.fechaHoraLlegada.ToString().Contains(buscar)
                );
            }
            switch (ordenar)
            {
                case "idUnidad_desc":
                    bitacora = bitacora.OrderByDescending(b => b.Unidad.numUnidad);
                    break;
                case "idChofer":
                    bitacora = bitacora.OrderBy(b => b.Chofer.cedChofer);
                    break;
                case "idChofer_desc":
                    bitacora = bitacora.OrderByDescending(b => b.Chofer.cedChofer);
                    break;
                case "tipoUnidad":
                    bitacora = bitacora.OrderBy(b => b.Unidad.tipoUnidad);
                    break;
                case "tipoUnidad_desc":
                    bitacora = bitacora.OrderByDescending(b => b.Unidad.tipoUnidad);
                    break;
                case "fechaHora":
                    bitacora = bitacora.OrderBy(b => b.fechaHora);
                    break;
                case "fechaHora_desc":
                    bitacora = bitacora.OrderByDescending(b => b.fechaHora);
                    break;
                case "fechaHoraLlegada":
                    bitacora = bitacora.OrderBy(b => b.fechaHoraLlegada);
                    break;
                case "fechaHoraLlegada_desc":
                    bitacora = bitacora.OrderByDescending(b => b.fechaHoraLlegada);
                    break;
                default:
                    bitacora = bitacora.OrderBy(b => b.Unidad.idUnidad);
                    break;
            }
            int extPagina = 5;
            int numPagina = (pagina ?? 1);
            return View(bitacora.ToPagedList(numPagina, extPagina));

        } 
       
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

***********************************************************************************************************************************************************************
• ChofersController

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Web;
using System.Web.Mvc;
using PagedList;
using ProyectoWEB.Models.BVDH_Models;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Admin")]
    public class ChofersController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();

        // GET: Chofers
        public ActionResult Index(string ordenar, string buscar, string filtroActual, int? pagina)
        {
            ViewBag.cedChoferSortParm = String.IsNullOrEmpty(ordenar) ? "cedChofer_desc" : "";
            ViewBag.nombreChoferSortParm = ordenar == "nombreChofer" ? "nombreChofer_desc" : "nombreChofer";
            ViewBag.tipoLicenciaSortParm = ordenar == "tipoLicencia" ? "tipoLicencia_desc" : "tipoLicencia";
            ViewBag.fechaVencLicSortParm = ordenar == "fechaVencLic" ? "fechaVencLic_desc" : "fechaVencLic";
            ViewBag.cuentaSortParm = ordenar == "cuenta" ? "cuenta_desc" : "cuenta";
            if (buscar != null)
            {
                pagina = 1;
            }
            else
            {
                buscar = filtroActual;
            }
            ViewBag.filtroActual = buscar;
            var chofer = from s in db.Chofer
                         where s.estado == null
                         select s;
            if (!String.IsNullOrEmpty(buscar))
            {
                chofer = chofer.Where(s => s.cedChofer.ToString().Contains(buscar) ||
                s.nombreChofer.Contains(buscar) || s.tipoLicencia.ToString().Contains(buscar) ||
                s.fechaVencLic.ToString().Contains(buscar) || s.AspNetUsers.Email.Contains(buscar));
            }
            switch (ordenar)
            {
                case "cedChofer_desc":
                    chofer = chofer.OrderByDescending(s => s.cedChofer);
                    break;
                case "nombreChofer":
                    chofer = chofer.OrderBy(s => s.nombreChofer);
                    break;
                case "nombreChofer_desc":
                    chofer = chofer.OrderByDescending(s => s.nombreChofer);
                    break;
                case "tipoLicencia":
                    chofer = chofer.OrderBy(s => s.tipoLicencia);
                    break;
                case "tipoLicencia_desc":
                    chofer = chofer.OrderByDescending(s => s.tipoLicencia);
                    break;
                case "fechaVencLic":
                    chofer = chofer.OrderBy(s => s.fechaVencLic);
                    break;
                case "fechaVencLic_desc":
                    chofer = chofer.OrderByDescending(s => s.fechaVencLic);
                    break;
                case "cuenta":
                    chofer = chofer.OrderBy(s => s.AspNetUsers.Email);
                    break;
                case "cuenta_desc":
                    chofer = chofer.OrderByDescending(s => s.AspNetUsers.Email);
                    break;
                default:
                    chofer = chofer.OrderBy(s => s.cedChofer);
                    break;
            }

            int extPagina = 5;
            int numPagina = (pagina ?? 1);
            return View(chofer.ToPagedList(numPagina, extPagina));
        }

        // GET: Chofers/Create
        public ActionResult Create()
        {
            ViewBag.id = new SelectList(db.AspNetUsers.Where(s => s.estado == null), "Id", "Email");
            return View();
        }

        // POST: Chofers/Create
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "idChofer,cedChofer,nombreChofer,tipoLicencia,fechaVencLic,estado,id")] Chofer chofer)
        {
            if (db.Chofer.Any(x => x.cedChofer == chofer.cedChofer))
            {
                ModelState.AddModelError("cedChofer", "La cédula registrada ya existe");
            }
            if (ModelState.IsValid)
            {
                db.Chofer.Add(chofer);
                AspNetUsers aspNetUsers = db.AspNetUsers.Find(chofer.id);
                aspNetUsers.estado = "En uso";
                db.Entry(aspNetUsers).State = EntityState.Modified;
                db.SaveChanges();

                //Envio de correo
                try
                {
                    var userEmail = (from a in db.AspNetUsers where a.Id == chofer.id select a.Email).FirstOrDefault();
                    var userPassword = (from a in db.AspNetUsers where a.Id == chofer.id select a.PasswordHash).FirstOrDefault();

                    string emailOrigen = ConfigurationManager.AppSettings["email"];
                    string emailDestino = userEmail;
                    string password = ConfigurationManager.AppSettings["password"];

                    MailMessage mailMessage = new MailMessage(emailOrigen, emailDestino, "BVDH - Asignación de cuenta",
                        "<h2>Estimado usuario<h2>" +
                        "<h2>Su cuenta asignada es: " + userEmail + "</h2>" +
                        "<h2>Su contraseña es: " + userPassword + "</h2>");

                    mailMessage.IsBodyHtml = true;

                    SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
                    smtpClient.EnableSsl = true;
                    smtpClient.UseDefaultCredentials = false;
                    smtpClient.Port = 587;
                    smtpClient.Credentials = new System.Net.NetworkCredential(emailOrigen, password);

                    smtpClient.Send(mailMessage);

                    smtpClient.Dispose();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

            }
            else
            {
                return View("~/Views/Shared/Error.cshtml");
            }

            return RedirectToAction("Index");
 
        }

        // GET: Chofers/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Chofer chofer = db.Chofer.Find(id);
            if (chofer == null)
            {
                return HttpNotFound();
            }

            var currentEmail = (from a in db.AspNetUsers where a.Id == chofer.id select a.Id).FirstOrDefault();
            AspNetUsers aspNetUsers = db.AspNetUsers.Find(currentEmail);
            aspNetUsers.estado = null;
            db.Entry(aspNetUsers).State = EntityState.Modified;
            db.SaveChanges();

            ViewBag.id = new SelectList(db.AspNetUsers.Where(s => s.estado == null), "Id", "Email");
            return View(chofer);
        }

        // POST: Chofers/Edit/5
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "idChofer,cedChofer,nombreChofer,tipoLicencia,fechaVencLic,estado,id")] Chofer chofer)
        {         
            if (ModelState.IsValid)
            {
                AspNetUsers aspNetUsers = db.AspNetUsers.Find(chofer.id);
                db.Entry(chofer).State = EntityState.Modified;
                aspNetUsers.estado = "En uso";
                db.Entry(aspNetUsers).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.id = new SelectList(db.AspNetUsers.Where(s => s.estado == null), "Id", "Email");
            return View(chofer);
        }

        // GET: Chofers/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Chofer chofer = db.Chofer.Find(id);
            if (chofer == null)
            {
                return HttpNotFound();
            }

            return View(chofer);
        }

        // POST: Chofers/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            try
            {
                Chofer chofer = db.Chofer.Find(id);
                AspNetUsers aspNetUsers = db.AspNetUsers.Find(chofer.id);
                aspNetUsers.estado = null;
                db.Entry(aspNetUsers).State = EntityState.Modified;
                chofer.estado = "Inactivo";
                //chofer.id = "Cuenta no asignada";
                db.Entry(chofer).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                throw ex;
            }
            
        }

        public ActionResult DataDisabled()
        {
            var datosDesactivados = from s in db.Chofer where s.estado == "Inactivo" select s;
            return View(datosDesactivados.ToList());
        }

        // GET: Chofers/Activate/5
        public ActionResult Activate(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Chofer chofer = db.Chofer.Find(id);
            if (chofer == null)
            {
                return HttpNotFound();
            }
            return View(chofer);
        }

        // POST: Chofers/Activate/5
        [HttpPost, ActionName("Activate")]
        [ValidateAntiForgeryToken]
        public ActionResult ActivateConfirmed(int id)
        {
            Chofer chofer = db.Chofer.Find(id);
            chofer.estado = null;
            db.Entry(chofer).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

***********************************************************************************************************************************************************************
• DatosUnidadsController

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using PagedList;
using ProyectoWEB.Models.BVDH_Models;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Admin")]
    public class DatosUnidadsController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();

        // GET: DatosUnidads
        public ActionResult Index(string ordenar, string filtroActual, string buscar, int? pagina)
        {
            ViewBag.numUnidadSortParm = String.IsNullOrEmpty(ordenar) ? "numUnidad_desc" : "";
            ViewBag.kilometrajeSortParm = ordenar == "kilometraje" ? "kilometraje_desc" : "kilometraje";
            ViewBag.litrosgasolinaSortParm = ordenar == "litrosGasolina" ? "litrosGasolina_desc" : "litrosGasolina";
            ViewBag.rendimientoSortParm = ordenar == "rendimiento" ? "rendimiento_desc" : "rendimiento";


            if (buscar != null)
            {
                pagina = 1;
            }
            else
            {
                buscar = filtroActual;
            }

            ViewBag.filtroActual = buscar;

            var datosUnidad = from s in db.DatosUnidad where s.estado == null select s;

            if (!String.IsNullOrEmpty(buscar))
            {
                datosUnidad = datosUnidad.Where(s => s.Unidad.numUnidad.ToString().Contains(buscar) ||
                              s.kilometrajeFinal.ToString().Contains(buscar) || s.litrosGasolina.ToString().Contains(buscar) ||
                              s.rendimiento.ToString().Contains(buscar));
            }

            switch (ordenar)
            {
                case "numUnidad_desc":
                    datosUnidad = datosUnidad.OrderByDescending(s => s.Unidad.numUnidad);
                    break;

                case "kilometraje":
                    datosUnidad = datosUnidad.OrderBy(s => s.kilometrajeFinal);
                    break;

                case "kilometraje_desc":
                    datosUnidad = datosUnidad.OrderByDescending(s => s.kilometrajeFinal);
                    break;

                case "litrosGasolina":
                    datosUnidad = datosUnidad.OrderBy(s => s.litrosGasolina);
                    break;

                case "litrosGasolina_desc":
                    datosUnidad = datosUnidad.OrderByDescending(s => s.litrosGasolina);
                    break;

                case "rendimiento":
                    datosUnidad = datosUnidad.OrderBy(s => s.rendimiento);
                    break;

                case "rendimiento_desc":
                    datosUnidad = datosUnidad.OrderByDescending(s => s.rendimiento);
                    break;
                default:
                    datosUnidad = datosUnidad.OrderBy(s => s.Unidad.numUnidad);
                    break;
            }

            int extPagina = 6;
            int numPagina = (pagina ?? 1);
            return View(datosUnidad.ToPagedList(numPagina, extPagina));
        }

        // GET: DatosUnidads/Create
        public ActionResult Create()
        {
            ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" ||
            s.estado == "En uso"), "idUnidad", "numUnidad");
            return View();
        }

        // POST: DatosUnidads/Create
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "idDatosU,idUnidad,kilometrajeInicial,kilometrajeFinal,litrosGasolina,rendimiento,estado")] DatosUnidad datosUnidad)
        {
            if (db.DatosUnidad.Any(s => s.idUnidad == datosUnidad.idUnidad))
            {
                ModelState.AddModelError("idUnidad", "Número de unidad ya registrado");
            }
            if (ModelState.IsValid)
            {
                db.DatosUnidad.Add(datosUnidad);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" ||
            s.estado == "En uso"), "idUnidad", "numUnidad");
            return View(datosUnidad);
        }

        // GET: DatosUnidads/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DatosUnidad datosUnidad = db.DatosUnidad.Find(id);
            if (datosUnidad == null)
            {
                return HttpNotFound();
            }
            ViewBag.idUnidad = new SelectList(db.Unidad, "idUnidad", "numUnidad", datosUnidad.idUnidad);
            return View(datosUnidad);
        }

        // POST: DatosUnidads/Edit/5
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "idDatosU,idUnidad,kilometrajeInicial,kilometrajeFinal,litrosGasolina,rendimiento,estado")] DatosUnidad datosUnidad)
        {
            if (ModelState.IsValid)
            {
                db.Entry(datosUnidad).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.idUnidad = new SelectList(db.Unidad, "idUnidad", "numUnidad", datosUnidad.idUnidad);
            return View(datosUnidad);
        }


        public ActionResult DataDisabled()
        {
            var datosDesactivados = from s in db.DatosUnidad where s.estado == "Inactivo" select s;
            return View(datosDesactivados.ToList());
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

***********************************************************************************************************************************************************************
• EstadoChofersController

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using PagedList;
using ProyectoWEB.Models.BVDH_Models;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Admin")]
    public class EstadoChofersController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();

        // GET: EstadoChofers
        //idEstadoC,idChofer,tipoEstado,descripcion,estado
        public ActionResult Index(string ordenar, string buscar, string filtroActual, int? pagina)
        {
            ViewBag.cedChoferSortParm = String.IsNullOrEmpty(ordenar) ? "cedChofer_desc" : "";
            ViewBag.tipoEstadoSortParm = ordenar == "tipoEstado" ? "tipoEstado_desc" : "tipoEstado";
            ViewBag.nombreChoferSortParm = ordenar == "nombreChofer" ? "nombreChofer_desc" : "nombreChofer";
            

            if (buscar != null)
            {
                pagina = 1;
            }
            else
            {
                buscar = filtroActual;
            }
            ViewBag.filtroActual = buscar;
            var estChofer = from s in db.EstadoChofer where  s.estado == null select s;

            if (!String.IsNullOrEmpty(buscar))
            {
                estChofer = estChofer.Where(s => s.Chofer.cedChofer.ToString().Contains(buscar) ||
                s.tipoEstado.Contains(buscar) || s.Chofer.nombreChofer.Contains(buscar) ||
                s.descripcion.Contains(buscar));
            }

            switch (ordenar)
            {
                case "cedChofer_desc":
                    estChofer = estChofer.OrderByDescending(s => s.Chofer.cedChofer);
                    break;

                case "tipoEstado":
                    estChofer = estChofer.OrderBy(s => s.tipoEstado);
                    break;

                case "tipoEstado_desc":
                    estChofer = estChofer.OrderByDescending(s => s.tipoEstado);
                    break;

                case "nombreChofer":
                    estChofer = estChofer.OrderBy(s => s.Chofer.nombreChofer);
                    break;

                case "nombreChofer_desc":
                    estChofer = estChofer.OrderByDescending(s => s.Chofer.nombreChofer);
                    break;

                default:
                    estChofer = estChofer.OrderBy(s => s.Chofer.idChofer);
                    break;
            }

            int extPagina = 5;
            int numPagina = (pagina ?? 1);
            return View(estChofer.ToPagedList(numPagina, extPagina));
        }
    

        // GET: EstadoChofers/Create
        public ActionResult Create()
        {
            ViewBag.idChofer = new SelectList(db.Chofer.Where(s => s.estado == null), "idChofer", "cedChofer");
            return View();
        }

        // POST: EstadoChofers/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "idEstadoC,idChofer,tipoEstado,descripcion,estado")] EstadoChofer estadoChofer)
        {
            if (db.EstadoChofer.Any(x => x.idChofer == estadoChofer.idChofer))
            {
                ModelState.AddModelError("idChofer", "La cédula registrada ya existe");
            }
            if (ModelState.IsValid)
            {
                db.EstadoChofer.Add(estadoChofer);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.idChofer = new SelectList(db.Chofer, "idChofer", "cedChofer", estadoChofer.idChofer);
            return View(estadoChofer);
        }

        // GET: EstadoChofers/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            EstadoChofer estadoChofer = db.EstadoChofer.Find(id);
            if (estadoChofer == null)
            {
                return HttpNotFound();
            }
            ViewBag.idChofer = new SelectList(db.Chofer, "idChofer", "nombreChofer", estadoChofer.idChofer);
            return View(estadoChofer);
        }

        // POST: EstadoChofers/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "idEstadoC,idChofer,tipoEstado,descripcion,estado")] EstadoChofer estadoChofer)
        {
            if (ModelState.IsValid)
            {
                db.Entry(estadoChofer).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.idChofer = new SelectList(db.Chofer, "idChofer", "nombreChofer", estadoChofer.idChofer);
            return View(estadoChofer);
        }

        // GET: EstadoChofers/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            EstadoChofer estadoChofer = db.EstadoChofer.Find(id);
            if (estadoChofer == null)
            {
                return HttpNotFound();
            }
            return View(estadoChofer);
        }

        // POST: EstadoChofers/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            EstadoChofer estadoChofer = db.EstadoChofer.Find(id);
            estadoChofer.estado = "Inactivo";
            db.Entry(estadoChofer).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");

        }

        public ActionResult DataDisabled()
        {
            var datosDesactivados = from s in db.EstadoChofer where s.estado == "Inactivo" select s;
            return View(datosDesactivados.ToList());
        }

        // GET: EstadoUnidads/Activate/5
        public ActionResult Activate(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            EstadoChofer estadoChofer = db.EstadoChofer.Find(id);
            if (estadoChofer == null)
            {
                return HttpNotFound();
            }
            return View(estadoChofer);
        }

        // POST: EstadoUnidads/Activate/5
        [HttpPost, ActionName("Activate")]
        [ValidateAntiForgeryToken]
        public ActionResult ActivateConfirmed(int id)
        {
            EstadoChofer estadoChofer = db.EstadoChofer.Find(id);
            estadoChofer.estado = null;
            db.Entry(estadoChofer).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

***********************************************************************************************************************************************************************
• EventualidadsController

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using ProyectoWEB.Models.BVDH_Models;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Chofer")]
    public class EventualidadsController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();

        // GET: Eventualidads
        public ActionResult Index()
        {
            var eventualidad = db.Eventualidad.Include(e => e.Chofer).Include(e => e.Unidad);
            return View(eventualidad.ToList());
        }

        // GET: Eventualidads/Create
        public ActionResult Create()
        {
            string userId = User.Identity.GetUserId();
            var date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            ViewBag.fechaActual = date;
            ViewBag.idChofer = new SelectList(db.Chofer.Where(s => s.id == userId), "idChofer", "cedChofer");
            ViewBag.idUnidad = new SelectList(db.Unidad, "idUnidad", "numUnidad");
            return View();
        }

        // POST: Eventualidads/Create
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "idEventualidad,idUnidad,idChofer,fechaEventualidad,tipodeEventualidad,descripcion")] Eventualidad eventualidad)
        {
            var date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            ViewBag.fechaActual = date;

            if (ModelState.IsValid)
            {
                db.Eventualidad.Add(eventualidad);
                db.SaveChanges();

                //Envio de correo
                try
                {

                    string emailOrigen = ConfigurationManager.AppSettings["email"];
                    string emailDestino = "leosgoni18@gmail.com";
                    string password = ConfigurationManager.AppSettings["password"];

                    var numUnidad = (from u in db.Unidad where u.idUnidad == eventualidad.idUnidad select u.numUnidad).FirstOrDefault();
                    var cedChofer = (from c in db.Chofer where c.idChofer == eventualidad.idChofer select c.cedChofer).FirstOrDefault();

                    MailMessage mailMessage = new MailMessage(emailOrigen, emailDestino, "BVDH - Reporte eventualidad",
                       "<h1>Tipo de eventualidad: "+ eventualidad.tipodeEventualidad +"</h1>" +
                       "<h1>Fecha del suceso: "+  eventualidad.fechaEventualidad+"</h1>" +
                       "<h1>Unidad involucrada: "+ numUnidad +"</h1>" +
                       "<h1>Chofer " + cedChofer +"</h1>" + 
                       "<h1>Breve descripción del suceso: " + eventualidad.descripcion+"</h1>"
                        );

                    mailMessage.IsBodyHtml = true;

                    SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
                    smtpClient.EnableSsl = true;
                    smtpClient.UseDefaultCredentials = false;
                    smtpClient.Port = 587;
                    smtpClient.Credentials = new System.Net.NetworkCredential(emailOrigen, password);

                    smtpClient.Send(mailMessage);

                    smtpClient.Dispose();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return View("notice");
            }
            else
            {
                return View("~/Views/Shared/Error.cshtml");
            }
        }
        
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

***********************************************************************************************************************************************************************
• ManageController

using System;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security;
using ProyectoWEB.Models;

namespace ProyectoWEB.Controllers
{
    [Authorize]
    public class ManageController : Controller
    {
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;

        public ManageController()
        {
        }

        public ManageController(ApplicationUserManager userManager, ApplicationSignInManager signInManager)
        {
            UserManager = userManager;
            SignInManager = signInManager;
        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set 
            { 
                _signInManager = value; 
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        //
        // GET: /Manage/Index
        public async Task<ActionResult> Index(ManageMessageId? message)
        {
            ViewBag.StatusMessage =
                message == ManageMessageId.ChangePasswordSuccess ? "Your password has been changed."
                : message == ManageMessageId.SetPasswordSuccess ? "Your password has been set."
                : message == ManageMessageId.SetTwoFactorSuccess ? "Your two-factor authentication provider has been set."
                : message == ManageMessageId.Error ? "An error has occurred."
                : message == ManageMessageId.AddPhoneSuccess ? "Your phone number was added."
                : message == ManageMessageId.RemovePhoneSuccess ? "Your phone number was removed."
                : "";

            var userId = User.Identity.GetUserId();
            var model = new IndexViewModel
            {
                HasPassword = HasPassword(),
                PhoneNumber = await UserManager.GetPhoneNumberAsync(userId),
                TwoFactor = await UserManager.GetTwoFactorEnabledAsync(userId),
                Logins = await UserManager.GetLoginsAsync(userId),
                BrowserRemembered = await AuthenticationManager.TwoFactorBrowserRememberedAsync(userId)
            };
            return View(model);
        }

        //
        // POST: /Manage/RemoveLogin
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> RemoveLogin(string loginProvider, string providerKey)
        {
            ManageMessageId? message;
            var result = await UserManager.RemoveLoginAsync(User.Identity.GetUserId(), new UserLoginInfo(loginProvider, providerKey));
            if (result.Succeeded)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }
                message = ManageMessageId.RemoveLoginSuccess;
            }
            else
            {
                message = ManageMessageId.Error;
            }
            return RedirectToAction("ManageLogins", new { Message = message });
        }

        //
        // GET: /Manage/AddPhoneNumber
        public ActionResult AddPhoneNumber()
        {
            return View();
        }

        //
        // POST: /Manage/AddPhoneNumber
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> AddPhoneNumber(AddPhoneNumberViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            // Generate the token and send it
            var code = await UserManager.GenerateChangePhoneNumberTokenAsync(User.Identity.GetUserId(), model.Number);
            if (UserManager.SmsService != null)
            {
                var message = new IdentityMessage
                {
                    Destination = model.Number,
                    Body = "Your security code is: " + code
                };
                await UserManager.SmsService.SendAsync(message);
            }
            return RedirectToAction("VerifyPhoneNumber", new { PhoneNumber = model.Number });
        }

        //
        // POST: /Manage/EnableTwoFactorAuthentication
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> EnableTwoFactorAuthentication()
        {
            await UserManager.SetTwoFactorEnabledAsync(User.Identity.GetUserId(), true);
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", "Manage");
        }

        //
        // POST: /Manage/DisableTwoFactorAuthentication
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DisableTwoFactorAuthentication()
        {
            await UserManager.SetTwoFactorEnabledAsync(User.Identity.GetUserId(), false);
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", "Manage");
        }

        //
        // GET: /Manage/VerifyPhoneNumber
        public async Task<ActionResult> VerifyPhoneNumber(string phoneNumber)
        {
            var code = await UserManager.GenerateChangePhoneNumberTokenAsync(User.Identity.GetUserId(), phoneNumber);
            // Send an SMS through the SMS provider to verify the phone number
            return phoneNumber == null ? View("Error") : View(new VerifyPhoneNumberViewModel { PhoneNumber = phoneNumber });
        }

        //
        // POST: /Manage/VerifyPhoneNumber
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> VerifyPhoneNumber(VerifyPhoneNumberViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var result = await UserManager.ChangePhoneNumberAsync(User.Identity.GetUserId(), model.PhoneNumber, model.Code);
            if (result.Succeeded)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }
                return RedirectToAction("Index", new { Message = ManageMessageId.AddPhoneSuccess });
            }
            // If we got this far, something failed, redisplay form
            ModelState.AddModelError("", "Failed to verify phone");
            return View(model);
        }

        //
        // POST: /Manage/RemovePhoneNumber
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> RemovePhoneNumber()
        {
            var result = await UserManager.SetPhoneNumberAsync(User.Identity.GetUserId(), null);
            if (!result.Succeeded)
            {
                return RedirectToAction("Index", new { Message = ManageMessageId.Error });
            }
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", new { Message = ManageMessageId.RemovePhoneSuccess });
        }

        //
        // GET: /Manage/ChangePassword
        public ActionResult ChangePassword()
        {
            return View();
        }

        //
        // POST: /Manage/ChangePassword
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ChangePassword(ChangePasswordViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var result = await UserManager.ChangePasswordAsync(User.Identity.GetUserId(), model.OldPassword, model.NewPassword);
            if (result.Succeeded)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }
                return RedirectToAction("Index", new { Message = ManageMessageId.ChangePasswordSuccess });
            }
            AddErrors(result);
            return View(model);
        }

        //
        // GET: /Manage/SetPassword
        public ActionResult SetPassword()
        {
            return View();
        }

        //
        // POST: /Manage/SetPassword
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> SetPassword(SetPasswordViewModel model)
        {
            if (ModelState.IsValid)
            {
                var result = await UserManager.AddPasswordAsync(User.Identity.GetUserId(), model.NewPassword);
                if (result.Succeeded)
                {
                    var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                    if (user != null)
                    {
                        await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                    }
                    return RedirectToAction("Index", new { Message = ManageMessageId.SetPasswordSuccess });
                }
                AddErrors(result);
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        //
        // GET: /Manage/ManageLogins
        public async Task<ActionResult> ManageLogins(ManageMessageId? message)
        {
            ViewBag.StatusMessage =
                message == ManageMessageId.RemoveLoginSuccess ? "The external login was removed."
                : message == ManageMessageId.Error ? "An error has occurred."
                : "";
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user == null)
            {
                return View("Error");
            }
            var userLogins = await UserManager.GetLoginsAsync(User.Identity.GetUserId());
            var otherLogins = AuthenticationManager.GetExternalAuthenticationTypes().Where(auth => userLogins.All(ul => auth.AuthenticationType != ul.LoginProvider)).ToList();
            ViewBag.ShowRemoveButton = user.PasswordHash != null || userLogins.Count > 1;
            return View(new ManageLoginsViewModel
            {
                CurrentLogins = userLogins,
                OtherLogins = otherLogins
            });
        }

        //
        // POST: /Manage/LinkLogin
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LinkLogin(string provider)
        {
            // Request a redirect to the external login provider to link a login for the current user
            return new AccountController.ChallengeResult(provider, Url.Action("LinkLoginCallback", "Manage"), User.Identity.GetUserId());
        }

        //
        // GET: /Manage/LinkLoginCallback
        public async Task<ActionResult> LinkLoginCallback()
        {
            var loginInfo = await AuthenticationManager.GetExternalLoginInfoAsync(XsrfKey, User.Identity.GetUserId());
            if (loginInfo == null)
            {
                return RedirectToAction("ManageLogins", new { Message = ManageMessageId.Error });
            }
            var result = await UserManager.AddLoginAsync(User.Identity.GetUserId(), loginInfo.Login);
            return result.Succeeded ? RedirectToAction("ManageLogins") : RedirectToAction("ManageLogins", new { Message = ManageMessageId.Error });
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && _userManager != null)
            {
                _userManager.Dispose();
                _userManager = null;
            }

            base.Dispose(disposing);
        }

#region Helpers
        // Used for XSRF protection when adding external logins
        private const string XsrfKey = "XsrfId";

        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError("", error);
            }
        }

        private bool HasPassword()
        {
            var user = UserManager.FindById(User.Identity.GetUserId());
            if (user != null)
            {
                return user.PasswordHash != null;
            }
            return false;
        }

        private bool HasPhoneNumber()
        {
            var user = UserManager.FindById(User.Identity.GetUserId());
            if (user != null)
            {
                return user.PhoneNumber != null;
            }
            return false;
        }

        public enum ManageMessageId
        {
            AddPhoneSuccess,
            ChangePasswordSuccess,
            SetTwoFactorSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
            RemovePhoneSuccess,
            Error
        }

#endregion
    }
}
***********************************************************************************************************************************************************************
• ManejoUnidadController

using Microsoft.AspNet.Identity;
using ProyectoWEB.Models.BVDH_Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Web;
using System.Web.Mvc;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Chofer")]
    public class ManejoUnidadController : Controller
    {

        private BVDH_Entities db = new BVDH_Entities();

        public ActionResult Index()
        {
            string userId = User.Identity.GetUserId();
            var idChofer = (from c in db.Chofer where c.id == userId select c.idChofer).FirstOrDefault();
            var data = from b in db.Bitacora where b.idChofer == idChofer select b;

            if(!data.Any())
            {
                ViewBag.status = true;
                ViewBag.drivelessState = false;
            }
            else
            {
                ViewBag.drivelessState = true;
            }

            return View(data.ToList());

        }

        public ActionResult typeOfTransport()
        {
            return View();
        }

        public ActionResult driveOut(int type)
        {
            
            var date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string userId = User.Identity.GetUserId();
            ViewBag.idChofer = new SelectList(db.Chofer.Where(s => s.id == userId), "idChofer", "cedChofer");
            ViewBag.fechaActual = date;

            var idChofer = (from c in db.Chofer where c.id == userId select c.idChofer).FirstOrDefault();
            var licencia = (from c in db.Chofer where c.id == userId select c.tipoLicencia).FirstOrDefault();

            bool exist = db.Bitacora.Any(x => x.idChofer == idChofer);

            if (exist == true)
            {
                //return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                return View("~/Views/Shared/Error.cshtml");
            }

           if(type == 1)
           {
                if (licencia.Equals("A2"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Motocicleta"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("A3"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Motocicleta"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("A4"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Motocicleta"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B1"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("B2"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("B3"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("B4"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
            }
            else if(type == 2)
            {
                if (licencia.Equals("B1"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Camioneta"), "idUnidad", "numUnidad");
                }
                else if(licencia.Equals("B2"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Camioneta"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B3"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Camioneta"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B4"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Camioneta"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("A2"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("A3"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("A4"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
            }
            else if (type == 3)
            {
                if (licencia.Equals("B1"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Vehículo Liviano"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B2"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Vehículo Liviano"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B3"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Vehículo Liviano"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B4"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Vehículo Liviano"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("A2"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("A3"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("A4"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
            }
            else if (type == 4)
            {
                if (licencia.Equals("B1"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Unidad de aprehensión"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B2"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Unidad de aprehensión"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B3"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "Unidad de aprehensión"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("B4"))
                {
                    ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.estado == "Disponible" && s.tipoUnidad == "VUnidad de aprehensión"), "idUnidad", "numUnidad");
                }
                else if (licencia.Equals("A2"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("A3"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }
                else if (licencia.Equals("A4"))
                {
                    return View("~/Views/Shared/Error.cshtml");
                }

            }

            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult driveOut([Bind(Include = "idBitacora,idChofer,idUnidad,fechaHora,fechaHoraLlegada,motivoUso,estado")] Bitacora bitacora)
        {
            if (ModelState.IsValid)
            {
                db.Bitacora.Add(bitacora);
                Unidad unidad = db.Unidad.Find(bitacora.idUnidad);
                unidad.estado = "En uso";
                db.Entry(unidad).State = EntityState.Modified;
                db.SaveChanges();

                var idDatosU = (from d in db.DatosUnidad where d.idUnidad == unidad.idUnidad select d.idDatosU).FirstOrDefault();

                //Envio de correo
                try
                {
                   
                    string emailOrigen = ConfigurationManager.AppSettings["email"];
                    string emailDestino = "leosgoni18@gmail.com";
                    string password = ConfigurationManager.AppSettings["password"];

                    var numUnidad = (from u in db.Unidad where u.idUnidad == bitacora.idUnidad select u.numUnidad).FirstOrDefault();
                    var cedChofer = (from c in db.Chofer where c.idChofer == bitacora.idChofer select c.cedChofer).FirstOrDefault();

                    MailMessage mailMessage = new MailMessage(emailOrigen, emailDestino, "BVDH - Salida de unidad", 
                        "<h1>BVDH le informa que la unidad " + numUnidad + " ha salido de la delegación por parte " +
                        "del chofer cédula " + cedChofer + " a las " + bitacora.fechaHora + "</h1>"

                        );

                    mailMessage.IsBodyHtml = true;

                    SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
                    smtpClient.EnableSsl = true;
                    smtpClient.UseDefaultCredentials = false;
                    smtpClient.Port = 587;
                    smtpClient.Credentials = new System.Net.NetworkCredential(emailOrigen, password);

                    smtpClient.Send(mailMessage);

                    smtpClient.Dispose();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return RedirectToAction("EditDatosUnidad", "ManejoUnidad", new { id = idDatosU});
            }
            else
            {
                return View("~/Views/Shared/Error.cshtml");
            }

        }

        // GET: DatosUnidads/Edit/5
        public ActionResult EditDatosUnidad(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DatosUnidad datosUnidad = db.DatosUnidad.Find(id);
            if (datosUnidad == null)
            {
                return HttpNotFound();
            }
            
            string userId = User.Identity.GetUserId();
            var chofer = (from c in db.Chofer where c.id == userId select c.idChofer).FirstOrDefault();
            var unidad = (from b in db.Bitacora where b.idChofer == chofer select b.idUnidad).FirstOrDefault();

            ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.idUnidad == unidad), "idUnidad", "numUnidad");

            return View(datosUnidad);
        }

        // POST: DatosUnidads/Edit/5
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditDatosUnidad([Bind(Include = "idDatosU,idUnidad,kilometrajeInicial,kilometrajeFinal,litrosGasolina,rendimiento,estado")] DatosUnidad datosUnidad)
        {
            var kInicial = (from c in db.DatosUnidad where c.idDatosU == datosUnidad.idDatosU select c.kilometrajeInicial).FirstOrDefault();

            if (kInicial > datosUnidad.kilometrajeInicial)
            {
                ModelState.AddModelError("kilometrajeInicial", "El kilometraje debe ser mayor al indicado");
            }

            if (ModelState.IsValid)
            {
                db.Entry(datosUnidad).State = EntityState.Modified;
                db.SaveChanges();

                return RedirectToAction("Index");
            }

            ViewBag.idUnidad = new SelectList(db.Unidad, "idUnidad", "numUnidad", datosUnidad.idUnidad);

            return View(datosUnidad);
        }


        public ActionResult driveIn(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Bitacora bitacora = db.Bitacora.Find(id);
            if (bitacora == null)
            {
                return HttpNotFound();
            }

            var date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            ViewBag.fechaActualLlegada = date;
            string userId = User.Identity.GetUserId();

            ViewBag.idChofer = new SelectList(db.Chofer.Where(s => s.id == userId), "idChofer", "cedChofer");
            ViewBag.idUnidad = new SelectList(db.Unidad, "idUnidad", "numUnidad", bitacora.idUnidad);

            return View(bitacora);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult driveIn([Bind(Include = "idBitacora,idChofer,idUnidad,fechaHora,fechaHoraLlegada,motivoUso,estado")] Bitacora bitacora)
        {
            if (ModelState.IsValid)
            {
                db.Entry(bitacora).State = EntityState.Modified;
                Unidad unidad = db.Unidad.Find(bitacora.idUnidad);
                unidad.estado = "Disponible";

                var idDatosU = (from d in db.DatosUnidad where d.idUnidad == unidad.idUnidad select d.idDatosU).FirstOrDefault();
                db.Entry(unidad).State = EntityState.Modified;
               
                //Envio de correo
                try
                {

                    string emailOrigen = ConfigurationManager.AppSettings["email"];
                    string emailDestino = "leosgoni18@gmail.com";
                    string password = ConfigurationManager.AppSettings["password"];

                    var numUnidad = (from u in db.Unidad where u.idUnidad == bitacora.idUnidad select u.numUnidad).FirstOrDefault();
                    var cedChofer = (from c in db.Chofer where c.idChofer == bitacora.idChofer select c.cedChofer).FirstOrDefault();

                    MailMessage mailMessage = new MailMessage(emailOrigen, emailDestino, "BVDH - Entrada de unidad",
                        "<h1>BVDH le informa que la unidad " + numUnidad + " ha entrado a la delegación por parte " +
                        "del chofer cédula " + cedChofer + " a las " + bitacora.fechaHoraLlegada + "</h1>"
                        );

                    mailMessage.IsBodyHtml = true;

                    SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
                    smtpClient.EnableSsl = true;
                    smtpClient.UseDefaultCredentials = false;
                    smtpClient.Port = 587;
                    smtpClient.Credentials = new System.Net.NetworkCredential(emailOrigen, password);

                    smtpClient.Send(mailMessage);

                    smtpClient.Dispose();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                db.Bitacora.Remove(bitacora);
                db.SaveChanges();

                return RedirectToAction("EditDatosUnidadFinal", "ManejoUnidad" , new { id = idDatosU});
            }
            string userId = User.Identity.GetUserId();
            ViewBag.idChofer = new SelectList(db.Chofer.Where(s => s.id == userId), "idChofer", "cedChofer");
            ViewBag.idUnidad = new SelectList(db.Unidad, "idUnidad", "numUnidad", bitacora.idUnidad);

            return View(bitacora);
        }



        // GET: DatosUnidads/Edit/5
        public ActionResult EditDatosUnidadFinal(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DatosUnidad datosUnidad = db.DatosUnidad.Find(id);
            if (datosUnidad == null)
            {
                return HttpNotFound();
            }

            //string userId = User.Identity.GetUserId();
            //var chofer = (from c in db.Chofer where c.id == userId select c.idChofer).FirstOrDefault();
            //var unidad = (from b in db.Bitacora_historica where b.idChofer == chofer select b.idUnidad).FirstOrDefault();

            ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.idUnidad == datosUnidad.idUnidad), "idUnidad", "numUnidad");

            
            return View(datosUnidad);
        }

        // POST: DatosUnidads/Edit/5
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que quiere enlazarse. Para obtener 
        // más detalles, vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditDatosUnidadFinal([Bind(Include = "idDatosU,idUnidad,kilometrajeInicial,kilometrajeFinal,litrosGasolina,rendimiento,estado")] DatosUnidad datosUnidad)
        {
            var kInicial = (from c in db.DatosUnidad where c.idDatosU == datosUnidad.idDatosU select c.kilometrajeInicial).FirstOrDefault();

            if(kInicial > datosUnidad.kilometrajeFinal)
            {
                ModelState.AddModelError("kilometrajeFinal", "El kilometraje debe ser mayor al indicado");
            }
            if (ModelState.IsValid)
            {
                db.Entry(datosUnidad).State = EntityState.Modified;
                db.SaveChanges();

                return RedirectToAction("Index");
            }

            //string userId = User.Identity.GetUserId();
            //var chofer = (from c in db.Chofer where c.id == userId select c.idChofer).FirstOrDefault();
            //var unidad = (from b in db.Bitacora_historica where b.idChofer == chofer select b.idUnidad).FirstOrDefault();

            ViewBag.idUnidad = new SelectList(db.Unidad.Where(s => s.idUnidad == datosUnidad.idUnidad), "idUnidad", "numUnidad");

            return View(datosUnidad);
        }


    }
}
***********************************************************************************************************************************************************************
• UnidadsController

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using ProyectoWEB.Models.BVDH_Models;
using PagedList;

namespace ProyectoWEB.Controllers
{
    [Authorize(Roles = "Admin")]

    public class UnidadsController : Controller
    {
        private BVDH_Entities db = new BVDH_Entities();

        // GET: Unidads
        public ActionResult Index(string ordenar, string buscar,string filtroActual, int? pagina)
        {
            ViewBag.numUnidadSortParm = String.IsNullOrEmpty(ordenar) ? "numUnidad_desc" : "";
            ViewBag.tipoUnidadSortParm = ordenar == "tipoUnidad" ? "tipoUnidad_desc" : "tipoUnidad";
            ViewBag.fabricanteSortParm = ordenar == "fabricante" ? "fabricante_desc" : "fabricante";
            ViewBag.modeloSortParm = ordenar == "modelo" ? "modelo_desc" : "modelo";
            ViewBag.fechaRevisionRTVSortParm = ordenar == "fechaRevisionRTV" ? "fechaRevisionRTV_desc" : "fechaRevisionRTV";
            ViewBag.isAlDiaSortParm = ordenar == "isAlDia" ? "isAlDia_desc" : "isAlDia";
            ViewBag.estadoSortParm = ordenar == "estado" ? "estado_desc" : "estado";
            if (buscar != null)
            {
                pagina = 1;
            }
            else
            {
                buscar = filtroActual;
            }
            ViewBag.filtroActual = buscar;
            var unidades = from s in db.Unidad
                           where s.estado == "Disponible" || s.estado == "En uso"
                           select s;
            if (!String.IsNullOrEmpty(buscar))
            {
                unidades = unidades.Where(s => s.numUnidad.ToString().Contains(buscar) ||
                s.fabricante.Contains(buscar) || s.modelo.ToString().Contains(buscar)  ||
                s.fechaRevisionRTV.ToString().Contains(buscar));
            }
            switch (ordenar)
            {
                case "numUnidad_desc":
                    unidades = unidades.OrderByDescending(s => s.numUnidad);
                    break;
                case "tipoUnidad":
                    unidades = unidades.OrderBy(s => s.tipoUnidad);
                    break;
                case "tipoUnidad_desc":
                    unidades = unidades.OrderByDescending(s => s.tipoUnidad);
                    break;
                case "fabricante":
                    unidades = unidades.OrderBy(s => s.fabricante);
                    break;
                case "fabricante_desc":
                    unidades = unidades.OrderByDescending(s => s.fabricante);
                    break;
                case "modelo":
                    unidades = unidades.OrderBy(s => s.modelo);
                    break;
                case "modelo_desc":
                    unidades = unidades.OrderByDescending(s => s.modelo);
                    break;
                case "fechaRevisionRTV":
                    unidades = unidades.OrderBy(s => s.fechaRevisionRTV);
                    break;
                case "fechaRevisionRTV_desc":
                    unidades = unidades.OrderByDescending(s => s.fechaRevisionRTV);
                    break;
                case "isAlDia":
                    unidades = unidades.OrderBy(s => s.isAlDia);
                    break;
                case "isAlDia_desc":
                    unidades = unidades.OrderByDescending(s => s.isAlDia);
                    break;
                case "estado":
                    unidades = unidades.OrderBy(s => s.estado);
                    break;
                case "estado_desc":
                    unidades = unidades.OrderByDescending(s => s.estado);
                    break;
                default:
                    unidades = unidades.OrderBy(s => s.numUnidad);
                    break;
            }
            int extPagina = 5;
            int numPagina = (pagina ?? 1);
            return View(unidades.ToPagedList(numPagina, extPagina));
        }

        // GET: Unidads/Create
        public ActionResult Create()
        {            
                return View();
        }

        // POST: Unidads/Create
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que desea enlazarse. Para obtener 
        // más información vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "idUnidad,numUnidad,tipoUnidad,fabricante,modelo,fechaRevisionRTV,isAlDia,estado")] Unidad unidad)
        {
            if (db.Unidad.Any(x => x.numUnidad == unidad.numUnidad))
            {
                ModelState.AddModelError("numUnidad", "El número de unidad ingresado ya existe");
            }
            if (ModelState.IsValid)
            {
                db.Unidad.Add(unidad);
                db.SaveChanges();

                if(unidad.isAlDia == "RTV no al dia")
                {
                    unidad.estado = "Inactivo";
                    db.SaveChanges();
                }


                return RedirectToAction("Index");
            }
            return View(unidad);
        }

        // GET: Unidads/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Unidad unidad = db.Unidad.Find(id);
            if (unidad == null)
            {
                return HttpNotFound();
            }
            return View(unidad);
        }

        // POST: Unidads/Edit/5
        // Para protegerse de ataques de publicación excesiva, habilite las propiedades específicas a las que desea enlazarse. Para obtener 
        // más información vea https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "idUnidad,numUnidad,tipoUnidad,fabricante,modelo,fechaRevisionRTV,isAlDia,estado")] Unidad unidad)
        {
            if (ModelState.IsValid)
            {
                db.Entry(unidad).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            if (unidad.isAlDia == "RTV no al dia")
            {
                unidad.estado = "Inactivo";
                db.SaveChanges();
            }
            return View(unidad);
        }

        // GET: Unidads/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Unidad unidad = db.Unidad.Find(id);
            if (unidad == null)
            {
                return HttpNotFound();
            }
            return View(unidad);
        }

        // POST: Unidads/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Unidad unidad = db.Unidad.Find(id);
            unidad.estado = "Inactivo";
            db.Entry(unidad).State = EntityState.Modified;
            db.SaveChanges();

            var datosU = (from d in db.DatosUnidad where d.idUnidad == id select d.idDatosU).FirstOrDefault();
            DatosUnidad datosUnidad = db.DatosUnidad.Find(datosU);
            datosUnidad.estado = "Inactivo";
            db.Entry(datosUnidad).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult DataDisabled()
        {
            var datosDesactivados = from s in db.Unidad where s.estado == "Inactivo" select s;
            return View(datosDesactivados.ToList());
        }

        // GET: Unidads/Activate/5
        public ActionResult Activate(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Unidad unidad = db.Unidad.Find(id);
            if (unidad == null)
            {
                return HttpNotFound();
            }
            return View(unidad);
        }

        // POST: Unidads/Activate/5
        [HttpPost, ActionName("Activate")]
        [ValidateAntiForgeryToken]
        public ActionResult ActivateConfirmed(int id)
        {
            Unidad unidad = db.Unidad.Find(id);
            unidad.estado = "Disponible";
            db.Entry(unidad).State = EntityState.Modified;
            db.SaveChanges();

            var datosU = (from d in db.DatosUnidad where d.idUnidad == id select d.idDatosU).FirstOrDefault();
            DatosUnidad datosUnidad = db.DatosUnidad.Find(datosU);
            datosUnidad.estado = null;
            db.Entry(datosUnidad).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

***********************************************************************************************************************************************************************
• Models
•  AspNetRoles.cs

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class AspNetRoles
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public AspNetRoles()
        {
            this.AspNetUsers = new HashSet<AspNetUsers>();
        }
    
        public string Id { get; set; }
        public string Name { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AspNetUsers> AspNetUsers { get; set; }
    }
}

***********************************************************************************************************************************************************************
• AspNetUsers 

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class AspNetUsers
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public AspNetUsers()
        {
            this.AspNetUserClaims = new HashSet<AspNetUserClaims>();
            this.AspNetUserLogins = new HashSet<AspNetUserLogins>();
            this.Chofer = new HashSet<Chofer>();
            this.AspNetRoles = new HashSet<AspNetRoles>();
        }
    
        public string Id { get; set; }
        public string Email { get; set; }
        public bool EmailConfirmed { get; set; }
        public string PasswordHash { get; set; }
        public string SecurityStamp { get; set; }
        public string PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public Nullable<System.DateTime> LockoutEndDateUtc { get; set; }
        public bool LockoutEnabled { get; set; }
        public int AccessFailedCount { get; set; }
        public string UserName { get; set; }
        public string estado { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AspNetUserClaims> AspNetUserClaims { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AspNetUserLogins> AspNetUserLogins { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Chofer> Chofer { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AspNetRoles> AspNetRoles { get; set; }
    }
}

***********************************************************************************************************************************************************************
• Bitacora

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Bitacora
    {
        public int idBitacora { get; set; }
        public int idChofer { get; set; }
        public int idUnidad { get; set; }
        public System.DateTime fechaHora { get; set; }
        public Nullable<System.DateTime> fechaHoraLlegada { get; set; }
        public string motivoUso { get; set; }
        public string estado { get; set; }
    
        public virtual Chofer Chofer { get; set; }
        public virtual Unidad Unidad { get; set; }
    }
}

***********************************************************************************************************************************************************************
• Bitacora_historica

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Bitacora_historica
    {
        public int idBitacora { get; set; }
        public int idChofer { get; set; }
        public int idUnidad { get; set; }
        public System.DateTime fechaHora { get; set; }
        public Nullable<System.DateTime> fechaHoraLlegada { get; set; }
        public string motivoUso { get; set; }
        public string estado { get; set; }
    
        public virtual Chofer Chofer { get; set; }
        public virtual Unidad Unidad { get; set; }
    }
}

***********************************************************************************************************************************************************************
• Chofer

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Chofer
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Chofer()
        {
            this.Bitacora = new HashSet<Bitacora>();
            this.Bitacora_historica = new HashSet<Bitacora_historica>();
            this.EstadoChofer = new HashSet<EstadoChofer>();
            this.Eventualidad = new HashSet<Eventualidad>();
        }
    
        public int idChofer { get; set; }
        public int cedChofer { get; set; }
        public string nombreChofer { get; set; }
        public string tipoLicencia { get; set; }
        public System.DateTime fechaVencLic { get; set; }
        public string estado { get; set; }
        public string id { get; set; }
    
        public virtual AspNetUsers AspNetUsers { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Bitacora> Bitacora { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Bitacora_historica> Bitacora_historica { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<EstadoChofer> EstadoChofer { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Eventualidad> Eventualidad { get; set; }
    }
}

***********************************************************************************************************************************************************************
• DatosUnidad

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class DatosUnidad
    {
        public int idDatosU { get; set; }
        public int idUnidad { get; set; }
        public Nullable<double> kilometrajeInicial { get; set; }
        public Nullable<double> kilometrajeFinal { get; set; }
        public Nullable<double> litrosGasolina { get; set; }
        public Nullable<double> rendimiento { get; set; }
        public string estado { get; set; }
    
        public virtual Unidad Unidad { get; set; }
    }
}


***********************************************************************************************************************************************************************
• EstadoChofer

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class EstadoChofer
    {
        public int idEstadoC { get; set; }
        public int idChofer { get; set; }
        public string tipoEstado { get; set; }
        public string descripcion { get; set; }
        public string estado { get; set; }
    
        public virtual Chofer Chofer { get; set; }
    }
}

***********************************************************************************************************************************************************************
• Eventualidad

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Eventualidad
    {
        public int idEventualidad { get; set; }
        public int idUnidad { get; set; }
        public int idChofer { get; set; }
        public System.DateTime fechaEventualidad { get; set; }
        public string tipodeEventualidad { get; set; }
        public string descripcion { get; set; }
    
        public virtual Chofer Chofer { get; set; }
        public virtual Unidad Unidad { get; set; }
    }
}


***********************************************************************************************************************************************************************
•  Unidad

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoWEB.Models.BVDH_Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Unidad
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Unidad()
        {
            this.Bitacora = new HashSet<Bitacora>();
            this.DatosUnidad = new HashSet<DatosUnidad>();
            this.EstadoUnidad = new HashSet<EstadoUnidad>();
            this.Eventualidad = new HashSet<Eventualidad>();
            this.Notificacion = new HashSet<Notificacion>();
            this.Bitacora_historica = new HashSet<Bitacora_historica>();
        }
    
        public int idUnidad { get; set; }
        public int numUnidad { get; set; }
        public string tipoUnidad { get; set; }
        public string fabricante { get; set; }
        public int modelo { get; set; }
        public System.DateTime fechaRevisionRTV { get; set; }
        public string isAlDia { get; set; }
        public string estado { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Bitacora> Bitacora { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DatosUnidad> DatosUnidad { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<EstadoUnidad> EstadoUnidad { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Eventualidad> Eventualidad { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Notificacion> Notificacion { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Bitacora_historica> Bitacora_historica { get; set; }
    }
}

***********************************************************************************************************************************************************************
• Views
 • SmartLogin

@using ProyectoWEB.Models
@model LoginViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <title>BVDH</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="Smart Login Form Responsive Widget,Login form widgets, Sign up Web forms , Login signup Responsive web form,Flat Pricing table,Flat Drop downs,Registration Forms,News letter Forms,Elements" />
    <script type="application/x-javascript">
         addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
        function hideURLbar(){ window.scrollTo(0,1); } </script>
    <link rel="icon" type="image/png" href="~/Content/img/Fuerza_Publica.png">

    <link href="~/smartlogin/css/style.css" rel="stylesheet" type="text/css" media="all">

    <link href="//fonts.googleapis.com/css?family=Roboto+Slab:100,300,400,700Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900iSlabo+27px&subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese" rel="stylesheet">

</head>
<body>
    

    <div class="agileheader">
        <h1>BVDH</h1>
        <img src="~/Content/img/Fuerza_Publica.png" style="width: 120px; height: 150px;" />
    </div>

    <div class="main-w3l">
        <div class="w3layouts-main">
            <h2 class="titulo">Iniciar Sesión</h2>
            @using (Html.BeginForm("SmartLogin", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @style = "color: red" })
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @type = "email", @placeholder = "Email" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "Contraseña" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <input type="submit" value="Ingresar" name="login" class="btn-primary">
            }

        </div>
    </div>

    <!--footer-->
    <div class="footer-w3l">
        <p style="text-align: center; color: #ffffff">&copy; BVDH. Todos los derechos reservados  </p>
    </div>
    <!--//footer-->

</body>
</html>

***********************************************************************************************************************************************************************
• Bitacora
  • Index
@model PagedList.IPagedList<ProyectoWEB.Models.BVDH_Models.Bitacora_historica>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" />
@{
    ViewBag.Title = "Bitácora";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Entrada y salida de unidades</h2>
<br />

@using (Html.BeginForm("Index", "Bitacora", FormMethod.Get))
{
    <p>
        @Html.TextBox("buscar", ViewBag.filtroActual as string)
        <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i></button>
    </p>
}

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Cédula Chofer", "Index", new
       {
           ordenar = ViewBag.idChoferSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("Número Unidad", "Index", new
  {
      ordenar = ViewBag.idUnidadSortParm,
      filtroActual = ViewBag.FiltroActual
  })
        </th>
        <th>
            @Html.ActionLink("Tipo de unidad", "Index", new
  {
      ordenar = ViewBag.tipoUnidadSortParm,
      filtroActual = ViewBag.FiltroActual
  })
        </th>
        <th>
            @Html.ActionLink("Hora de salida", "Index", new
{
ordenar = ViewBag.fechaHoraSortParm,
filtroActual = ViewBag.FiltroActual
})
        </th>
        <th>
            @Html.ActionLink("Hora de entrada", "Index", new
{
ordenar = ViewBag.fechaHoraLlegadaSortParm,
filtroActual = ViewBag.FiltroActual
})
        </th>
        <th>
            <label>Motivo de uso</label>
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Chofer.cedChofer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Unidad.numUnidad)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Unidad.tipoUnidad)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.fechaHora)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.fechaHoraLlegada)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.motivoUso)
            </td>
            <td></td>
        </tr>
    }

</table>
<nav>
    @Html.PagedListPager(Model, pagina => Url.Action("Index",
    new { pagina, ordenar = ViewBag.tipoActual, filtroActual = ViewBag.FiltroActual }))
</nav>

***********************************************************************************************************************************************************************
• Chofers
  • Activate

@model ProyectoWEB.Models.BVDH_Models.Chofer

@{
    ViewBag.Title = "Activate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Activate</h2>

<h3>¿Está seguro de activar el chofer @Html.DisplayFor(model => model.cedChofer)?</h3>
<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.cedChofer)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.cedChofer)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.nombreChofer)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.nombreChofer)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.tipoLicencia)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tipoLicencia)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.fechaVencLic)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fechaVencLic)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.estado)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.estado)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AspNetUsers.Email)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AspNetUsers.Email)
        </dd>

    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

<div class="form-actions no-color">
    <input type="submit" value="Activar" class="btn btn-primary mr-2" />
    <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
</div>
    }
</div>





• Create

@model ProyectoWEB.Models.BVDH_Models.Chofer

@{
    ViewBag.Title = "Chofer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Registrar nuevo chofer</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-10">
                <label>Cédula del chofer</label>
                @Html.EditorFor(model => model.cedChofer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cedChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Nombre</label>
                @Html.EditorFor(model => model.nombreChofer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nombreChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Licencia</label>
                @Html.EditorFor(model => model.tipoLicencia, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tipoLicencia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Vencimiento de licencia</label>
                @Html.EditorFor(model => model.fechaVencLic, new { htmlAttributes = new { @class = "form-control" , @type = "date" } })
                @Html.ValidationMessageFor(model => model.fechaVencLic, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Cuenta</label>
                @Html.DropDownList("id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registrar" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}







• DataDisabled

@model ProyectoWEB.Models.BVDH_Models.Chofer

@{
    ViewBag.Title = "Chofer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Registrar nuevo chofer</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-10">
                <label>Cédula del chofer</label>
                @Html.EditorFor(model => model.cedChofer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cedChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Nombre</label>
                @Html.EditorFor(model => model.nombreChofer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nombreChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Licencia</label>
                @Html.EditorFor(model => model.tipoLicencia, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tipoLicencia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Vencimiento de licencia</label>
                @Html.EditorFor(model => model.fechaVencLic, new { htmlAttributes = new { @class = "form-control" , @type = "date" } })
                @Html.ValidationMessageFor(model => model.fechaVencLic, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Cuenta</label>
                @Html.DropDownList("id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registrar" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}





• Delete

@model ProyectoWEB.Models.BVDH_Models.Chofer

@{
    ViewBag.Title = "Delete";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Desactivar chofer</h2>
<br />
<h3>¿Está seguro de desactivar el chofer @Html.DisplayFor(model => model.cedChofer)?</h3>
<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            <label>Cédula del chofer</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.cedChofer)
        </dd>

        <dt>
            <label>Nombre</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.nombreChofer)
        </dd>

        <dt>
            <label>Licencia</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tipoLicencia)
        </dd>

        <dt>
            <label>Vencimiento de licencia</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fechaVencLic)
        </dd>

        <dt>
            <label>Cuenta</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AspNetUsers.Email)
        </dd>

    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color">
            <input type="submit" value="Desactivar" class="btn btn-primary mr-2" /> 
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    }
</div>



• Edit

@model ProyectoWEB.Models.BVDH_Models.Chofer

@{
    ViewBag.Title = "Chofer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Editar chofer</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.idChofer)

        <div class="form-group">
            <div class="col-md-10">
                <label>Cédula del chofer</label>
                @Html.EditorFor(model => model.cedChofer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cedChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Nombre</label>
                @Html.EditorFor(model => model.nombreChofer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nombreChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Licencia</label>
                @Html.EditorFor(model => model.tipoLicencia, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tipoLicencia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Vencimiento de licencia</label>
                @Html.EditorFor(model => model.fechaVencLic, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.fechaVencLic, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Cuenta</label>
                @Html.DropDownList("id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar cambios" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}

</div>









• Index

@model PagedList.IPagedList<ProyectoWEB.Models.BVDH_Models.Chofer>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" />
@{
    ViewBag.Title = "Chofer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Lista de choferes</h2>

<p>
    @Html.ActionLink("Ingresar chofer", "Create")
</p>
<br />
@using (Html.BeginForm("Index", "Chofers", FormMethod.Get))
{
    <p>
        @Html.TextBox("buscar", ViewBag.filtroActual as string)
        <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i></button>
    </p>
}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Cédula Chofer", "Index", new { ordenar = ViewBag.cedChoferSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Nombre", "Index", new { ordenar = ViewBag.nombreChoferSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Licencia", "Index", new { ordenar = ViewBag.tipoLicenciaSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Vencimiento de licencia", "Index", new { ordenar = ViewBag.fechaVencLicSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Cuenta", "Index", new { ordenar = ViewBag.cuentaSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.cedChofer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.nombreChofer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.tipoLicencia)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.fechaVencLic)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AspNetUsers.Email)
            </td>
            <td>
                @Html.ActionLink("Editar", "Edit", new { id = item.idChofer }) |
                @Html.ActionLink("Desactivar", "Delete", new { id = item.idChofer })
            </td>
        </tr>
    }

</table>
@Html.ActionLink("Datos Desactivados", "DataDisabled")
<nav>
    @Html.PagedListPager(Model, pagina => Url.Action("Index",
    new { pagina, ordenar = ViewBag.tipoActual, filtroActual = ViewBag.FiltroActual }))
</nav>

***********************************************************************************************************************************************************************
• DatosUnidads
  • Create

@model ProyectoWEB.Models.BVDH_Models.DatosUnidad

@{
    ViewBag.Title = "Datos unidad";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Editar estado</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-10">
                <label>Número Unidad</label>
                @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Kilometraje</label>
                @Html.EditorFor(model => model.kilometrajeInicial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.kilometrajeInicial, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.kilometrajeFinal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.kilometrajeFinal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.kilometrajeFinal, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-10">
                <label>Capacidad combustible</label>
                @Html.EditorFor(model => model.litrosGasolina, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.litrosGasolina, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}







•  DataDisabled

@model IEnumerable<ProyectoWEB.Models.BVDH_Models.DatosUnidad>

@{
    ViewBag.Title = "DataDisabled";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Unidades Desactivadas</h2>
<br />

<table class="table">
    <tr>
        <th>
            Número Unidad
        </th>
        <th>
            Kilometraje
        </th>
        <th>
            Litros de gasolina
        </th>
        <th>
            Rendimiento
        </th>
        <th>
            Estado
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Unidad.numUnidad)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.kilometrajeFinal)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.litrosGasolina)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.rendimiento)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.estado)
            </td>
        </tr>
    }

</table>







• Edit

@model ProyectoWEB.Models.BVDH_Models.DatosUnidad

@{
    ViewBag.Title = "Datos Unidad";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Editar estado</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.idDatosU)

        <div class="form-group">
            <div class="col-md-10">
                <label>Número Unidad</label>
                @Html.HiddenFor(m => m.idUnidad)
                @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Kilometraje inicial</label>
                @Html.EditorFor(model => model.kilometrajeInicial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.kilometrajeInicial, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Kilometraje inicial</label>
                @Html.EditorFor(model => model.kilometrajeFinal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.kilometrajeFinal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Capacidad combustible</label>
                @Html.EditorFor(model => model.litrosGasolina, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.litrosGasolina, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.rendimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rendimiento, new { htmlAttributes = new { @class = "form-control" , @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.rendimiento, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}






• Index

@model PagedList.IPagedList<ProyectoWEB.Models.BVDH_Models.DatosUnidad>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" />
@{
    ViewBag.Title = "Datos Unidad";
}



<h2>Lista de estados por unidad</h2>

<p>
    @Html.ActionLink("Ingresar nuevo dato", "Create")
</p>
<br />
@using (Html.BeginForm("Index", "DatosUnidads", FormMethod.Get))
{
    @Html.TextBox("buscar", ViewBag.filtroActual as string)
    <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i></button>
}
<br />
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Numero unidad", "Index", new { ordenar = ViewBag.numUnidadSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Kilometraje", "Index", new { ordenar = ViewBag.kilometrajeSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Litros de gasolina", "Index", new { ordenar = ViewBag.litrosgasolinaSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Rendimiento", "Index", new { ordenar = ViewBag.rendimientoSortParm, filtroActual = ViewBag.FiltroActual })
        </th>


        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Unidad.numUnidad)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.kilometrajeFinal)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.litrosGasolina)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.rendimiento)
            </td>

            <td>
                @Html.ActionLink("Editar", "Edit", new { id = item.idDatosU })
            </td>
        </tr>
    }

</table>
<nav>
    @Html.PagedListPager(Model, pagina => Url.Action("Index",
    new { pagina, ordenar = ViewBag.tipoActual, filtroActual = ViewBag.FiltroActual }))
</nav>
 


***********************************************************************************************************************************************************************
• EstadoChofer
  • Activate

@model ProyectoWEB.Models.BVDH_Models.EstadoChofer

@{
    ViewBag.Title = "Activate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Activar chofer</h2>
<br />
<h3>¿Está seguro de activar el chofer @Html.DisplayFor(model => model.idChofer)?</h3>
<div>
    <h4>EstadoChofer</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            <label>Número de estado</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Chofer.idChofer)
        </dd>

        <dt>
            <label>Número del chofer</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Chofer.cedChofer)
        </dd>

        <dt>
            <label>Nombre</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Chofer.nombreChofer)
        </dd>


        <dt>
            <label>Tipo de estado</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tipoEstado)
        </dd>

        <dt>
            <label>Descripcion</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.descripcion)
        </dd>

    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color">
            <input type="submit" value="Activar" class="btn btn-primary mr-2" /> 
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    }
</div>







• Create 

@model ProyectoWEB.Models.BVDH_Models.EstadoChofer

@{
    ViewBag.Title = "Estado Chofer";
}

<h2>Registrar nuevo estado</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">          
            <div class="col-md-10">
                <label>Cédula chofer</label>
                @Html.DropDownList("idChofer", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Tipo de estado</label>
                @Html.DropDownListFor(model => model.tipoEstado, new SelectListItem[]
             {
                 new SelectListItem() {Text = "Activo" , Value = "Activo"},
                 new SelectListItem() {Text = "Inactivo" , Value = "Inactivo"},
                 }, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Descripcion</label>
                @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registrar" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}






• DataDisabled

@model IEnumerable<ProyectoWEB.Models.BVDH_Models.EstadoChofer>

@{
    ViewBag.Title = "DataDisabled";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Choferes Desactivados</h2>
<br />

<table class="table">
    <tr>
        <th>
            Nombre chofer
        </th>
        <th>
            Tipo estado
        </th>
        <th>
            Descripción
        </th>


        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Chofer.nombreChofer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.tipoEstado)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.descripcion)
            </td>

            <td>
                @Html.ActionLink("Activar", "Activate", new { id = item.idEstadoC })
            </td>
        </tr>
    }

</table>








• Delete

@model ProyectoWEB.Models.BVDH_Models.EstadoChofer

@{
    ViewBag.Title = "Estado Chofer";
}

<h2>Desactivar estado</h2>

<h3>¿Está seguro de eliminar el estado del chofer @Html.DisplayFor(model => model.Chofer.cedChofer)?</h3>

<div>
    <hr />
    <dl class="dl-horizontal">

        <dt>
            <label>Número de estado</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Chofer.idChofer)
        </dd>

        <dt>
            <label>Número del chofer</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Chofer.cedChofer)
        </dd>

        <dt>
            <label>Nombre</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Chofer.nombreChofer)
        </dd>


        <dt>
            <label>Tipo de estado</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tipoEstado)
        </dd>

        <dt>
            <label>Descripcion</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.descripcion)
        </dd>


    </dl>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <br />
        <div class="form-actions no-color">
            <input type="submit" value="Desactivar" class="btn btn-primary mr-2" />
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    }
</div>






• Edit

@model ProyectoWEB.Models.BVDH_Models.EstadoChofer

@{
    ViewBag.Title = "Estado Chofer";
}

<h2>Editar estado</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.idEstadoC)

    <div class="form-group">
        <div class="col-md-10">
            <label>Cédula chofer</label>
            @Html.HiddenFor(model => model.idChofer)
            @Html.DropDownList("idChofer", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.idChofer, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Estado</label>
            @Html.DropDownListFor(model => model.tipoEstado, new SelectListItem[]
            {
            new SelectListItem() {Text = "Activo" , Value = "Activo"},
            new SelectListItem() {Text = "Inactivo" , Value = "Inactivo"},
            }, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.tipoEstado, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Descripción</label>
            @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <br />
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar cambios" class="btn btn-primary mr-2" />
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    </div>
</div>
}







• Index

@model PagedList.IPagedList<ProyectoWEB.Models.BVDH_Models.EstadoChofer>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" />

@{
    ViewBag.Title = "Estado Chofer";
}

<h2>Lista de estados por chofer</h2>

<p>
    @Html.ActionLink("Ingresar estado del chofer", "Create")
</p>

@using (Html.BeginForm("Index", "EstadoChofers", FormMethod.Get))
{
    @Html.TextBox("buscar", ViewBag.filtroActual as string)
    <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i></button>
}

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Cédula del chofer", "Index", new { ordenar = ViewBag.cedChoferSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            @Html.ActionLink("Tipo estado", "Index", new { ordenar = ViewBag.tipoEstadoSortParm, filtroActual = ViewBag.FiltroActual })
        </th>
        <th>
            <label style="color: #4e73df;">Descripción</label>
        </th>

        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Chofer.cedChofer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.tipoEstado)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.descripcion)
            </td>

            <td>
                @Html.ActionLink("Editar", "Edit", new { id = item.idEstadoC }) |
                @Html.ActionLink("Desactivar", "Delete", new { id = item.idEstadoC })
            </td>
        </tr>
    }

</table>
@Html.ActionLink("Datos Desactivados", "DataDisabled")
<nav>
    @Html.PagedListPager(Model, pagina => Url.Action("Index",
    new { pagina, ordenar = ViewBag.tipoActual, filtroActual = ViewBag.FiltroActual }))
</nav>



***********************************************************************************************************************************************************************
• Eventualidads
  • Create

@model ProyectoWEB.Models.BVDH_Models.Eventualidad

@{
    ViewBag.Title = "Eventualidades";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}

<h2>Ingresar eventualidad</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">           
            <div class="col-md-10">
                <label>Número Unidad</label>
                @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Cédula del chofer</label>
                @Html.DropDownList("idChofer", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Fecha del suceso</label>
                @Html.EditorFor(model => model.fechaEventualidad, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.fechaActual } })
                @Html.ValidationMessageFor(model => model.fechaEventualidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Tipo de suceso</label>
                @Html.EditorFor(model => model.tipodeEventualidad, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tipodeEventualidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Breve descripción</label>
                @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registrar" class="btn btn-primary m-2" />
                <a class="btn btn-danger" href="@Url.Action("Index", "Home")">Cancelar</a>
            </div>
        </div>
    </div>
}







• Index

@model IEnumerable<ProyectoWEB.Models.BVDH_Models.Eventualidad>

@{
    ViewBag.Title = "Eventualidad";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Lista de eventualidades</h2>
<br />
<table class="table">
    <tr>
        <th>
            <label>Número de unidad</label>
        </th>
        <th>
            <label>Tipo de unidad</label>
        </th>
        <th>
            <label>Cédula del chofer</label>
        </th>
        <th>
            <label>Fecha del suceso</label>
        </th>
        <th>
            <label>Tipo del suceso</label>
        </th>
        <th>
            <label>Breve descripción</label>
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
<tr>
    <td>
        @Html.DisplayFor(modelItem => item.Unidad.numUnidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Unidad.tipoUnidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Chofer.cedChofer)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.fechaEventualidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.tipodeEventualidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.descripcion)
    </td>
    <td>
        @Html.ActionLink("Desactivar", "Delete", new { id = item.idEventualidad })
    </td>
</tr>
}

</table>







• notice


@{
    ViewBag.Title = "Eventualidades";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}
<h2>Gracias!</h2>
<h3>Eventualida agregada, se le notificará al administrador lo más temprano posible</h3>


***********************************************************************************************************************************************************************
• driveIn

@model ProyectoWEB.Models.BVDH_Models.Bitacora

@{
    ViewBag.Title = "Entregar Unidad";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}

<h2>Entregar unidad</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.idBitacora)

        <div class="form-group">
            <div class="col-md-10">
                <label>Cédula Chofer</label>
                @Html.DropDownList("idChofer", null, htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.idChofer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Unidad usada</label>
                @Html.HiddenFor(model => model.idUnidad)
                @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Hora de salida</label>
                @Html.EditorFor(model => model.fechaHora, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.fechaHora, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Hora de llegada</label>
                @Html.EditorFor(model => model.fechaHoraLlegada, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.fechaActualLlegada, @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.fechaHoraLlegada, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Motivo de uso</label>
                @Html.EditorFor(model => model.motivoUso, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.motivoUso, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Entregar unidad" class="btn btn-primary mr-2" />
                <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
            </div>
        </div>
    </div>
}






• driveOut

@model ProyectoWEB.Models.BVDH_Models.Bitacora

@{
    ViewBag.Title = "Retiro de unidad";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}

<h2>Retirar unidad</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <div class="col-md-10">
            <label>Cédula Chofer</label>
            @Html.DropDownList("idChofer", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.idChofer, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Unidades disponibles</label>
            @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Hora de salida</label>
            @Html.EditorFor(model => model.fechaHora, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.fechaActual, @readonly = "readonly" }})
            @Html.ValidationMessageFor(model => model.fechaHora, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.fechaHoraLlegada, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fechaHoraLlegada, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fechaHoraLlegada, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        <div class="col-md-10">
            <label>Motivo de uso</label>
            @Html.EditorFor(model => model.motivoUso, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.motivoUso, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <br />

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Retirar" class="btn btn-primary mr-2" />
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    </div>
</div>
}









• EditDatosUnidad

@model ProyectoWEB.Models.BVDH_Models.DatosUnidad

@{
    ViewBag.Title = "Retiro de unidad";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}

<h2>Editar datos de la unidad</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.idDatosU)

    <div class="form-group">
        <div class="col-md-10">
            <label>Número Unidad</label>
            @Html.HiddenFor(model => model.idUnidad)
            @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-group">
            <div class="col-md-10">
                <label>Kilometraje</label>
                @Html.EditorFor(model => model.kilometrajeInicial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.kilometrajeInicial, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.kilometrajeFinal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.kilometrajeFinal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.kilometrajeFinal, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-10">
                <label>Capacidad combustible</label>
                @Html.EditorFor(model => model.litrosGasolina, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.litrosGasolina, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.rendimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rendimiento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rendimiento, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-primary" />
            </div>
        </div>
    </div>
}









• EditDatosUnidadFinal

@model ProyectoWEB.Models.BVDH_Models.DatosUnidad

@{
    ViewBag.Title = "Entregar Unidad";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}

<h2>Editar datos de la unidad</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.idDatosU)

    <div class="form-group">
        <div class="col-md-10">
            <label>Número Unidad</label>
            @Html.HiddenFor(model => model.idUnidad)
            @Html.DropDownList("idUnidad", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.idUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Kilometraje al inicio</label>
            @Html.EditorFor(model => model.kilometrajeInicial, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.kilometrajeInicial, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Kilometraje al final</label>
            @Html.EditorFor(model => model.kilometrajeFinal, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.kilometrajeFinal, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Capacidad combustible</label>
            @Html.EditorFor(model => model.litrosGasolina, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.litrosGasolina, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.rendimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rendimiento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rendimiento, "", new { @class = "text-danger" })
            </div>
        </div>*@

    @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar" class="btn btn-primary" />
        </div>
    </div>
</div>

}









• Index

@model IEnumerable<ProyectoWEB.Models.BVDH_Models.Bitacora>

@{
    ViewBag.Title = "Entrada y salida de unidades";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}

    <div hidden="@ViewBag.status">
        <h2>Unidad en uso</h2>
        <br />
        <table class="table">
            <tr>
                <th>
                    @Html.Label("Número Unidad")
                </th>
                <th>
                    @Html.Label("Cédula Chofer")
                </th>
                <th>
                    @Html.Label("Tipo de unidad")
                </th>
                <th>
                    @Html.Label("Hora de salida")
                </th>
                <th>
                    @Html.Label("Motivo de uso")
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Unidad.numUnidad)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Chofer.cedChofer)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Unidad.tipoUnidad)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.fechaHora)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.motivoUso)

                    </td>
                    <td>
                        @*@Html.ActionLink("Edit", "Edit", new { id=item.idBitacora }) |
                        @Html.ActionLink("Details", "Details", new { id=item.idBitacora }) |
                        @Html.ActionLink("Delete", "Delete", new { id=item.idBitacora })*@
                        @Html.ActionLink("Entregar unidad", "driveIn", new { id = item.idBitacora })
                    </td>
                </tr>
            }
        </table>
    </div>
<div hidden="@ViewBag.drivelessState">
    <h2>Ninguna unidad en uso. @Html.ActionLink("Tomar unidad", "typeOfTransport")</h2>
</div>








• typeOfTransport


@{
    ViewBag.Title = "Retirar unidad";
    Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
}
<div class="container align-self-md-center">
    <h2>Tipo de unidades disponibles</h2>
    <br /><br />
    <a class="btn btn-primary btn-block" href="@Url.Action("driveOut", "ManejoUnidad", new { type = 1})"><i class="fas fa-motorcycle"></i>  Motocicleta</a>
    <br />
    <a class="btn btn-primary btn-block" href="@Url.Action("driveOut", "ManejoUnidad", new { type = 2})"><i class="fas fa-truck-pickup"></i>  Camioneta</a>
    <br />
    <a class="btn btn-primary btn-block" href="@Url.Action("driveOut", "ManejoUnidad", new { type = 3})"><i class="fas fa-car-side"></i>  Vehículo Liviano</a>
    <br />
    <a class="btn btn-primary btn-block" href="@Url.Action("driveOut", "ManejoUnidad", new { type = 4})"><i class="fas fa-truck"></i>  Unidad de aprehensión</a>
    <br />
</div>

<style>
 /* Style buttons */
.btn {
  /*background-color: DodgerBlue; /* Blue background */
  border: none; /* Remove borders */
  color: white; /* White text */
  padding: 12px 16px; /* Some padding */
  font-size: 17px; /* Set a font size */
  cursor: pointer; /* Mouse pointer on hover */
  border-radius: 24px;
}

/* Darker background on mouse-over */
.btn:hover {
  background-color: RoyalBlue;
}
    </style>



***********************************************************************************************************************************************************************
• Shared
  • _Layout

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BVDH - @ViewBag.Title</title>
    <link rel="icon" type="image/png" href="~/Content/img/Fuerza_Publica.png">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<body id="page-top">
    <!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center" href="@Url.Action("Index", "Home")">
                <div class="sidebar-brand-icon">
                    <!-- Logotipo fuerza publica -->
                    <img src="~/Content/img/Fuerza_Publica.png" style="width: 80px; height: 80px; padding:10px;" />
                </div>
                <div class="sidebar-brand-text mx-3">BVDH</div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">
            <!-- Nav Item - Dashboard -->
            <li class="nav-item">
                <a class="nav-link" href="index.html">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Reportes y estadísticas</span>
                </a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Heading -->
            <div class="sidebar-heading">
                Funciones
            </div>

            <!-- Nav Item - Pages Collapse Menu -->
            <li class="nav-item">
                <a href="@Url.Action("Index", "Bitacora")" class="nav-link collapsed">
                    <i class="far fa-list-alt"></i>
                    <span>Bitácora</span>
                </a>
            </li>

            <li class="nav-item">
                <a href="@Url.Action("Index", "Chofers")" class="nav-link" collapsed>
                    <i class="fas fa-user-cog"></i>
                    <span>Chofer</span>
                </a>

            </li>

            <li class="nav-item">
                <a href="@Url.Action("Index", "EstadoChofers")" class="nav-link" collapsed>
                    <i class="fas fa-user-check"></i>
                    <span>Estado Chofer</span>
                </a>

            </li>

            <li class="nav-item">
                <a href="@Url.Action("Index", "Eventualidads")" class="nav-link collapsed">
                    <i class="fas fa-car-crash"></i>
                    <span>Eventualidades</span>
                </a>

            </li>

            <li class="nav-item">
                <a href="@Url.Action("Index", "Unidads")" class="nav-link collapsed">
                    <i class="fas fa-car-side"></i>
                    <span>Unidad</span>
                </a>

            </li>

            <li class="nav-item">
                <a href="@Url.Action("Index", "DatosUnidads")" class="nav-link collapsed">
                    <i class="fas fa-clipboard-list"></i>
                    <span>Datos Unidad</span>
                </a>

            </li>

            <!-- Nav Item - Utilities Collapse Menu -->
            <li class="nav-item">
                <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUtilities" aria-expanded="true" aria-controls="collapseUtilities">
                    <i class="fas fa-fw fa-wrench"></i>
                    <span>Configuración</span>
                </a>
                <div id="collapseUtilities" class="collapse" aria-labelledby="headingUtilities" data-parent="#accordionSidebar">
                    <div class="bg-white py-2 collapse-inner rounded">
                        <a class="collapse-item" href="@Url.Action("Register", "Account")">Cuentas</a>
                    </div>
                </div>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Heading -->
            <div class="sidebar-heading">
                Complementos
            </div>

            <!-- Nav Item - Pages Collapse Menu -->
            <!--
    <li class="nav-item active">
        <a class="nav-link" href="#" data-toggle="collapse" data-target="#collapsePages" aria-expanded="true" aria-controls="collapsePages">
            <i class="fas fa-fw fa-folder"></i>
            <span>Pages</span>
        </a>
        <div id="collapsePages" class="collapse show" aria-labelledby="headingPages" data-parent="#accordionSidebar">
            <div class="bg-white py-2 collapse-inner rounded">
                <h6 class="collapse-header">Login Screens:</h6>
                <a class="collapse-item" href="login.html">Login</a>
                <a class="collapse-item" href="register.html">Register</a>
                <a class="collapse-item" href="forgot-password.html">Forgot Password</a>
                <div class="collapse-divider"></div>
                <h6 class="collapse-header">Other Pages:</h6>
                <a class="collapse-item" href="404.html">404 Page</a>
                <a class="collapse-item active" href="blank.html">Blank Page</a>
            </div>
        </div>
    </li>
    -->
            <!-- Nav Item - Charts
    <li class="nav-item">
        <a class="nav-link" href="charts.html">
            <i class="fas fa-fw fa-chart-area"></i>
            <span>Charts</span>
        </a>
    </li>
    -->
            <!-- Nav Item - Tables
    <!-- <li class="nav-item">
         <a class="nav-link" href="tables.html">
             <i class="fas fa-fw fa-table"></i>
             <span>Tablas</span>
         </a>
     </li>-->
            <!-- Divider -->
            <hr class="sidebar-divider d-none d-md-block">

            <!-- Sidebar Toggler (Sidebar) -->
            <div class="text-center d-none d-md-inline">
                <button class="rounded-circle border-0" id="sidebarToggle"></button>
            </div>

        </ul>
        <!-- End of Sidebar -->
        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">

            <!-- Main Content -->
            <div id="content">
               
                <!-- Topbar -->
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                    <!-- Sidebar Toggle (Topbar) -->
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fa fa-bars"></i>
                    </button>

                    <!-- Topbar Search 
                    <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
                        <div class="input-group">
                            <input type="text" class="form-control bg-light border-0 small" placeholder="Buscar..." aria-label="Search" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="button">
                                    <i class="fas fa-search fa-sm"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                        -->
                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">

                        <!-- Nav Item - Search Dropdown (Visible Only XS) -->
                        <li class="nav-item dropdown no-arrow d-sm-none">
                            <a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-search fa-fw"></i>
                            </a>
                            <!-- Dropdown - Messages -->
                            <div class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in" aria-labelledby="searchDropdown">
                                <form class="form-inline mr-auto w-100 navbar-search">
                                    <div class="input-group">
                                        <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
                                        <div class="input-group-append">
                                            <button class="btn btn-primary" type="button">
                                                <i class="fas fa-search fa-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </li>

                        <!-- Nav Item - Alerts -->
                        <li class="nav-item dropdown no-arrow mx-1">
                            <a class="nav-link dropdown-toggle" href="#" id="alertsDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-bell fa-fw"></i>
                                <!-- Counter - Alerts -->
                                <span class="badge badge-danger badge-counter">1</span>
                            </a>
                            <!-- Dropdown - Alerts -->
                            <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="alertsDropdown">
                                <h6 class="dropdown-header">
                                    Alerts Center
                                </h6>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="mr-3">
                                        <div class="icon-circle bg-primary">
                                            <i class="fas fa-file-alt text-white"></i>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="small text-gray-500">December 12, 2019</div>
                                        <span class="font-weight-bold">A new monthly report is ready to download!</span>
                                    </div>
                                </a>

                                <!-- Notificaciones de codigo -->

                                <a class="dropdown-item d-flex align-items-center" href="#">


                                </a>
                                <a class="dropdown-item text-center small text-gray-500" href="#">Show All Alerts</a>
                            </div>
                        </li>

                        <!-- Nav Item - Messages -->
                        <li class="nav-item dropdown no-arrow mx-1">
                            <a class="nav-link dropdown-toggle" href="#" id="messagesDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-envelope fa-fw"></i>
                                <!-- Counter - Messages -->
                                <span class="badge badge-danger badge-counter"></span>
                            </a>
                            <!-- Mensajes 
                            <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="messagesDropdown">
                                <h6 class="dropdown-header">
                                    Message Center
                                </h6>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="dropdown-list-image mr-3">
                                        <img class="rounded-circle" src="https://source.unsplash.com/fn_BT9fwg_E/60x60" alt="">
                                        <div class="status-indicator bg-success"></div>
                                    </div>
                                    <div class="font-weight-bold">
                                        <div class="text-truncate">Hi there! I am wondering if you can help me with a problem I've been having.</div>
                                        <div class="small text-gray-500">Emily Fowler · 58m</div>
                                    </div>
                                </a>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="dropdown-list-image mr-3">
                                        <img class="rounded-circle" src="https://source.unsplash.com/AU4VPcFN4LE/60x60" alt="">
                                        <div class="status-indicator"></div>
                                    </div>
                                    <div>
                                        <div class="text-truncate">I have the photos that you ordered last month, how would you like them sent to you?</div>
                                        <div class="small text-gray-500">Jae Chun · 1d</div>
                                    </div>
                                </a>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="dropdown-list-image mr-3">
                                        <img class="rounded-circle" src="https://source.unsplash.com/CS2uCrpNzJY/60x60" alt="">
                                        <div class="status-indicator bg-warning"></div>
                                    </div>
                                    <div>
                                        <div class="text-truncate">Last month's report looks great, I am very happy with the progress so far, keep up the good work!</div>
                                        <div class="small text-gray-500">Morgan Alvarez · 2d</div>
                                    </div>
                                </a>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="dropdown-list-image mr-3">
                                        <img class="rounded-circle" src="https://source.unsplash.com/Mv9hjnEUHR4/60x60" alt="">
                                        <div class="status-indicator bg-success"></div>
                                    </div>
                                    <div>
                                        <div class="text-truncate">Am I a good boy? The reason I ask is because someone told me that people say this to all dogs, even if they aren't good...</div>
                                        <div class="small text-gray-500">Chicken the Dog · 2w</div>
                                    </div>
                                </a>
                                <a class="dropdown-item text-center small text-gray-500" href="#">Read More Messages</a>
                            </div>-->
                        </li>

                        <div class="topbar-divider d-none d-sm-block"></div>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Administrador</span>
                               <!--Imagen-->
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Profile
                                </a>
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Settings
                                </a>
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Activity Log
                                </a>

                                <div class="dropdown-divider"></div>

                                <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                                    @*<a href="~/Views/Shared/_Layout_Chofer.cshtml">~/Views/Shared/_Layout_Chofer.cshtml</a>*@
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Cerrar Sesión
                                </a>
                            </div>
                        </li>

                    </ul>

                </nav>
                <!-- End of Topbar -->
                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Page Heading -->
                    @RenderBody()

                </div>
                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->
            <!-- Footer -->
            <footer class="sticky-footer bg-white">
                <div class="container my-auto">
                    <div class="copyright text-center my-auto">
                        <span>Copyright &copy; Ministerio de Gobernación, Policía y Seguridad Pública</span>
                    </div>
                </div>
            </footer>
            <!-- End of Footer -->

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->
    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Cerrar sesión</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Selecciona "Cerrar Sesión" si quieres acabar la sesión actual.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancelar</button>
                    @using Microsoft.AspNet.Identity
                    @if (Request.IsAuthenticated)
                    {
                        using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
                        {
                            @Html.AntiForgeryToken()
           
                                <a class="btn btn-primary" href="javascript:document.getElementById('logoutForm').submit()">Cerrar sesión</a>
                        }
                    }

                    </div>
            </div>
        </div>
    </div>


    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>









• _Layout_Chofer

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BVDH - @ViewBag.Title</title>
    <link rel="icon" type="image/png" href="~/Content/img/Fuerza_Publica.png">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<body id="page-top">
    <!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center" href="@Url.Action("Index", "Home")">
                <div class="sidebar-brand-icon">
                    <!-- Logotipo fuerza publica -->
                    <img src="~/Content/img/Fuerza_Publica.png" style="width: 80px; height: 80px; padding:10px;" />
                </div>
                <div class="sidebar-brand-text mx-3">BVDH</div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">
            <!-- Nav Item - Dashboard -->
            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Heading -->
            <div class="sidebar-heading">
                Funciones
            </div>

            <!-- Nav Item - Pages Collapse Menu -->
            @*<li class="nav-item">
            <a href="@Url.Action("Index", "Bitacoras")" class="nav-link collapsed">
                <i class="far fa-list-alt"></i>
                <span>Bitácora</span>
            </a>
        </li>

        <li class="nav-item">
            <a href="@Url.Action("Index", "GestionUnidad")" class="nav-link" collapsed>
                <i class="fas fa-user-cog"></i>
                <span>Inicio</span>
            </a>

        </li>

        <li class="nav-item">
            <a href="@Url.Action("Index", "Chofers")" class="nav-link" collapsed>
                <i class="fas fa-user-cog"></i>
                <span>Chofer</span>
            </a>

        </li>


        <li class="nav-item">
            <a href="@Url.Action("EntregarUnidad", "GestionUnidad")" class="nav-link collapsed">
                <i class="fas fa-motorcycle"></i>
                <span>Entrega de unidad</span>
            </a>

        </li>*@

            <li class="nav-item">
                <a href="@Url.Action("typeOfTransport", "ManejoUnidad")" class="nav-link collapsed">
                    <i class="fas fa-motorcycle"></i>
                    <span>Retirar unidad</span>
                </a>
            </li>

            <li class="nav-item">
                <a href="@Url.Action("Index", "ManejoUnidad")" class="nav-link collapsed">
                    <i class="fas fa-car-side"></i>
                    <span>Unidad en uso</span>
                </a>
            </li>

            <li class="nav-item">
                <a href="@Url.Action("Create", "Eventualidads")" class="nav-link collapsed">
                    <i class="fas fa-car-crash"></i>
                    <span>Eventualidades</span>
                </a>
            </li>

            <!-- Nav Item - Pages Collapse Menu -->
            <!--
    <li class="nav-item active">
        <a class="nav-link" href="#" data-toggle="collapse" data-target="#collapsePages" aria-expanded="true" aria-controls="collapsePages">
            <i class="fas fa-fw fa-folder"></i>
            <span>Pages</span>
        </a>
        <div id="collapsePages" class="collapse show" aria-labelledby="headingPages" data-parent="#accordionSidebar">
            <div class="bg-white py-2 collapse-inner rounded">
                <h6 class="collapse-header">Login Screens:</h6>
                <a class="collapse-item" href="login.html">Login</a>
                <a class="collapse-item" href="register.html">Register</a>
                <a class="collapse-item" href="forgot-password.html">Forgot Password</a>
                <div class="collapse-divider"></div>
                <h6 class="collapse-header">Other Pages:</h6>
                <a class="collapse-item" href="404.html">404 Page</a>
                <a class="collapse-item active" href="blank.html">Blank Page</a>
            </div>
        </div>
    </li>
    -->
            <!-- Nav Item - Charts
    <li class="nav-item">
        <a class="nav-link" href="charts.html">
            <i class="fas fa-fw fa-chart-area"></i>
            <span>Charts</span>
        </a>
    </li>
    -->
            <!-- Nav Item - Tables -->
            @*<li class="nav-item">
            <a class="nav-link" href="tables.html">
                <i class="fas fa-fw fa-table"></i>
                <span>Tablas</span>
            </a>
        </li>*@

            <!-- Divider -->
            <hr class="sidebar-divider d-none d-md-block">

            <!-- Sidebar Toggler (Sidebar) -->
            <div class="text-center d-none d-md-inline">
                <button class="rounded-circle border-0" id="sidebarToggle"></button>
            </div>

        </ul>
        <!-- End of Sidebar -->
        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">

            <!-- Main Content -->
            <div id="content">

                <!-- Topbar -->
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                    <!-- Sidebar Toggle (Topbar) -->
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fa fa-bars"></i>
                    </button>


                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">

                        <!-- Nav Item - Search Dropdown (Visible Only XS) -->
                        <li class="nav-item dropdown no-arrow d-sm-none">
                            <a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-search fa-fw"></i>
                            </a>
                            <!-- Dropdown - Messages -->
                            <div class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in" aria-labelledby="searchDropdown">
                                <form class="form-inline mr-auto w-100 navbar-search">
                                    <div class="input-group">
                                        <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
                                        <div class="input-group-append">
                                            <button class="btn btn-primary" type="button">
                                                <i class="fas fa-search fa-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </li>

                        <!-- Nav Item - Alerts -->
                        <li class="nav-item dropdown no-arrow mx-1">
                            <a class="nav-link dropdown-toggle" href="#" id="alertsDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-bell fa-fw"></i>
                                <!-- Counter - Alerts -->
                                <span class="badge badge-danger badge-counter">2</span>
                            </a>
                            <!-- Dropdown - Alerts -->
                            <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="alertsDropdown">
                                <h6 class="dropdown-header">
                                    Alerts Center
                                </h6>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="mr-3">
                                        <div class="icon-circle bg-primary">
                                            <i class="fas fa-file-alt text-white"></i>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="small text-gray-500">December 12, 2019</div>
                                        <span class="font-weight-bold">A new monthly report is ready to download!</span>
                                    </div>
                                </a>

                                <!-- Notificaciones de codigo -->

                                <a class="dropdown-item d-flex align-items-center" href="#">


                                </a>
                                <a class="dropdown-item text-center small text-gray-500" href="#">Mostrar todas las alertas</a>
                            </div>
                        </li>

                        <!-- Nav Item - Messages -->
                        <li class="nav-item dropdown no-arrow mx-1">
                            <a class="nav-link dropdown-toggle" href="#" id="messagesDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-envelope fa-fw"></i>
                                <!-- Counter - Messages -->
                                <span class="badge badge-danger badge-counter"></span>
                            </a>
                            <!-- Mensajes
                            <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="messagesDropdown">
                                <h6 class="dropdown-header">
                                    Message Center
                                </h6>
                                <a class="dropdown-item d-flex align-items-center" href="#">
                                    <div class="dropdown-list-image mr-3">
                                        <img class="rounded-circle" src="https://source.unsplash.com/fn_BT9fwg_E/60x60" alt="">
                                        <div class="status-indicator bg-success"></div>
                                    </div>
                                    <div class="font-weight-bold">
                                        <div class="text-truncate">Hi there! I am wondering if you can help me with a problem I've been having.</div>
                                        <div class="small text-gray-500">Emily Fowler · 58m</div>
                                    </div>
                                </a>
                                <a class="dropdown-item text-center small text-gray-500" href="#">Read More Messages</a>
                            </div>-->
                        </li>

                        <div class="topbar-divider d-none d-sm-block"></div>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Usuario</span>
                                <!--Imagen-->
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Perfil
                                </a>

                                <div class="dropdown-divider"></div>

                                <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">                                   
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Cerrar Sesión
                                </a>
                            </div>
                        </li>

                    </ul>

                </nav>
                <!-- End of Topbar -->
                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Page Heading -->
                    @RenderBody()

                </div>
                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->
            <!-- Footer -->
            <footer class="sticky-footer bg-white">
                <div class="container my-auto">
                    <div class="copyright text-center my-auto">
                        <span>Copyright &copy; Ministerio de Gobernación, Policía y Seguridad Pública</span>
                    </div>
                </div>
            </footer>
            <!-- End of Footer -->

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->
    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>


    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Cerrar sesión</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Selecciona "Cerrar Sesión" si quieres acabar la sesión actual.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancelar</button>
                    @using Microsoft.AspNet.Identity
                    @if (Request.IsAuthenticated)
                    {
                        using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
                        {
                            @Html.AntiForgeryToken()

                            <a class="btn btn-primary" href="javascript:document.getElementById('logoutForm').submit()">Cerrar sesión</a>
                        }
                    }

                </div>
            </div>
        </div>
    </div>


    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
 
***********************************************************************************************************************************************************************
• Unidads
   • Activate

@model ProyectoWEB.Models.BVDH_Models.Unidad

@{
    ViewBag.Title = "Unidad";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Activar Unidad</h2>
<br />
<h3>¿Está seguro de activar la unidad @Html.DisplayFor(model => model.numUnidad)?</h3>
<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            <label>Número Unidad</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.numUnidad)
        </dd>

        <dt>
            <label>Fabricante</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fabricante)
        </dd>

        <dt>
            <label>Tipo</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tipoUnidad)
        </dd>

        <dt>
            <label>Modelo</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.modelo)
        </dd>

        <dt>
            <label>Ult. Revisión RTV</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fechaRevisionRTV)
        </dd>

        <dt>
            <label>RTV</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.isAlDia)
        </dd>

    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

<div class="form-actions no-color">
    <input type="submit" value="Activar" class="btn btn-primary mr-2" /> 
    <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
</div>
    }
</div>






• Create

@model ProyectoWEB.Models.BVDH_Models.Unidad

@{
    ViewBag.Title = "Unidades";
}

<h2>Registrar nueva unidad</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <br />
    <div class="form-group">
        <div class="col-md-10">
            <label>Número Unidad</label>
            @Html.EditorFor(model => model.numUnidad, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.numUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Tipo</label>
            @Html.DropDownListFor(model => model.tipoUnidad, new SelectListItem[] {
               new SelectListItem() { Text = "Camioneta", Value = "Camioneta"},
               new SelectListItem() { Text = "Motocicleta", Value = "Motocicleta"},
               new SelectListItem() { Text = "Unidad de aprehensión", Value = "Unidad de aprehensión"},
               new SelectListItem() { Text = "Vehículo Liviano", Value = "Vehículo Liviano"},
               }, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.tipoUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Fabricante</label>
            @Html.EditorFor(model => model.fabricante, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.fabricante, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Modelo</label>
            @Html.EditorFor(model => model.modelo, new { htmlAttributes = new { @class = "form-control" , @type = "number" } })
            @Html.ValidationMessageFor(model => model.modelo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Ult. Revisión RTV</label>
            <br />
            @Html.EditorFor(model => model.fechaRevisionRTV, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
            @Html.ValidationMessageFor(model => model.fechaRevisionRTV, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Estado</label>
            @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control", @Value = "Disponible", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
        </div>
    </div>

    <br />

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Registrar" class="btn btn-primary mr-2" />
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    </div>
</div>
}







• DataDisabled

@model IEnumerable<ProyectoWEB.Models.BVDH_Models.Unidad>

@{
    ViewBag.Title = "Unidad";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Unidades Desactivadas</h2>
<br />
<table class="table">
    <tr>
        <th>
            <label>Número Unidad</label>
        </th>
        <th>
            <label>Tipo</label>
        </th>
        <th>
            <label>Fabricante</label>
        </th>
        <th>
            <label>Modelo</label>
        </th>
        <th>
            <label>Ult. Revisión RTV</label>
        </th>
        <th>
            <label>Modelo</label>
        </th>
        <th>
            <label>RTV</label>
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
<tr>
    <td>
        @Html.DisplayFor(modelItem => item.numUnidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.tipoUnidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.fabricante)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.modelo)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.fechaRevisionRTV)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.isAlDia)
    </td>
    <td>
        @Html.ActionLink("Activar", "Activate", new { id = item.idUnidad })
    </td>
</tr>
}

</table>







• Delete

@model ProyectoWEB.Models.BVDH_Models.Unidad

@{
    ViewBag.Title = "Unidades";
}

<h2>Desactivar unidad</h2>
<br />
<h3>¿Está seguro de desactivar la unidad @Html.DisplayFor(model => model.numUnidad)?</h3>
<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            <label>Número Unidad</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.numUnidad)
        </dd>

        <dt>
            <label>Tipo</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.tipoUnidad)
        </dd>

        <dt>
            <label>Fabricante</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fabricante)
        </dd>

        <dt>
            <label>Modelo</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.modelo)
        </dd>

        <dt>
            <label>Ult. Revisión RTV</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fechaRevisionRTV)
        </dd>

        <dt>
            <label>RTV</label>
        </dt>

        <dd>
            @Html.DisplayFor(model => model.isAlDia)
        </dd>

    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()
        <br />
<div class="form-actions no-color">
    <input type="submit" value="Desactivar" class="btn btn-primary mr-2" />
    <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
</div>
    }
</div>







• Edit

@model ProyectoWEB.Models.BVDH_Models.Unidad

@{
    ViewBag.Title = "Unidades";
}

<h2>Editar Unidad</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.idUnidad)

    <div class="form-group">
        <div class="col-md-10">
            <label>Número Unidad</label>
            @Html.EditorFor(model => model.numUnidad, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.numUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Tipo</label>
            @Html.DropDownListFor(model => model.tipoUnidad, new SelectListItem[] {
               new SelectListItem() { Text = "Camioneta", Value = "Camioneta"},
               new SelectListItem() { Text = "Motocicleta", Value = "Motocicleta"},
               new SelectListItem() { Text = "Unidad de aprehensión", Value = "Unidad de aprehensión"},
               new SelectListItem() { Text = "Vehículo Liviano", Value = "Vehículo Liviano"},
               }, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.tipoUnidad, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Fabricante</label>
            @Html.EditorFor(model => model.fabricante, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.fabricante, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Modelo</label>
            @Html.EditorFor(model => model.modelo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.modelo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>Ult. Revisión RTV</label>
            <br />
            @Html.EditorFor(model => model.fechaRevisionRTV, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
            @Html.ValidationMessageFor(model => model.fechaRevisionRTV, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label>RTV</label>
            @Html.EditorFor(model => model.isAlDia, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.isAlDia, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <br />
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar cambios" class="btn btn-primary mr-2" />
            <a class="btn btn-danger" href="@Url.Action("Index")">Cancelar</a>
        </div>
    </div>
</div>
}







• Index


@model PagedList.IPagedList<ProyectoWEB.Models.BVDH_Models.Unidad>


@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" />
@{
    ViewBag.Title = "Unidades";
}

<h2>Lista de Unidades</h2>

<p>
    @Html.ActionLink("Ingresar Unidad", "Create")
</p>
<br />
@using (Html.BeginForm("Index", "Unidads", FormMethod.Get))
{
    <p>
        @Html.TextBox("buscar", ViewBag.filtroActual as string)
        <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i></button>
    </p>
}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Número Unidad", "Index", new
            {
                ordenar = ViewBag.numUnidadSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("Tipo", "Index", new
            {
                ordenar = ViewBag.tipoUnidadSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("Fabricante", "Index", new
            {
                ordenar = ViewBag.fabricanteSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("Modelo", "Index", new
            {
                ordenar = ViewBag.modeloSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("Ult. Revisión RTV", "Index", new
            {
                ordenar = ViewBag.fechaRevisionRTVSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("RTV", "Index", new
            {
                ordenar = ViewBag.isAlDiaSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th>
            @Html.ActionLink("Estado", "Index", new
            {
                ordenar = ViewBag.estadoSortParm,
           filtroActual = ViewBag.FiltroActual
       })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
<tr>
    <td>
        @Html.DisplayFor(modelItem => item.numUnidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.tipoUnidad)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.fabricante)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.modelo)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.fechaRevisionRTV)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.isAlDia)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.estado)
    </td>
    <td>
        @Html.ActionLink("Editar", "Edit", new { id = item.idUnidad }) |
        @Html.ActionLink("Desactivar", "Delete", new { id = item.idUnidad })
    </td>
</tr>
    }

</table>
@Html.ActionLink("Datos Desactivados", "DataDisabled")
<nav>
    @Html.PagedListPager(Model, pagina => Url.Action("Index",
    new { pagina, ordenar = ViewBag.tipoActual, filtroActual = ViewBag.FiltroActual }))
</nav>

***********************************************************************************************************************************************************************
• ViewStart

@{ 
    if(this.User.IsInRole("Admin") || !this.User.Identity.IsAuthenticated)
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    else if (this.User.IsInRole("Chofer") || !this.User.Identity.IsAuthenticated)
    {
        Layout = "~/Views/Shared/_Layout_Chofer.cshtml";
    }

}

***********************************************************************************************************************************************************************
• WebConfig

<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  https://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <connectionStrings>
    <add name="DefaultConnection" connectionString="Data Source=.;Initial Catalog=BD_BVDH;Integrated Security=True" providerName="System.Data.SqlClient"></add>
    <add name="BVDH_Entities" connectionString="metadata=res://*/Models.BVDH_Models.BVDH_Models.csdl|res://*/Models.BVDH_Models.BVDH_Models.ssdl|res://*/Models.BVDH_Models.BVDH_Models.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=.;initial catalog=BD_BVDH;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="email" value="leosgoni18@gmail.com"></add>
    <add key="password" value="Neffmau5#"></add>
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation debug="true" targetFramework="4.7.2" />
    <httpRuntime targetFramework="4.7.2" />
  </system.web>
  <system.webServer>
    <modules>
      <remove name="FormsAuthentication" />
    </modules>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin.Security" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin.Security.OAuth" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin.Security.Cookies" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Antlr3.Runtime" publicKeyToken="eb42632606e9261f" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.2" newVersion="3.5.0.2" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Optimization" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.6.5135.21930" newVersion="1.6.5135.21930" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" />
        <bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.7.0" newVersion="5.2.7.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:default /nowarn:1659;1699;1701" />
      <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:default /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" />
    </compilers>
  </system.codedom>
</configuration>

***********************************************************************************************************************************************************************















